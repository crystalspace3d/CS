#============================================================================
# Rules for creating csharp modules.
# Copyright (C) 2006 by Jorrit Tyberghein
#
#    This library is free software; you can redistribute it and/or modify it
#    under the terms of the GNU Library General Public License as published by
#    the Free Software Foundation; either version 2 of the License, or (at your
#    option) any later version.
#
#    This library is distributed in the hope that it will be useful, but
#    WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
#    or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU Library General Public
#    License for more details.
#
#    You should have received a copy of the GNU Library General Public License
#    along with this library; if not, write to the Free Software Foundation,
#    Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
#
#============================================================================
# PythMod rule
# Can be used to create cspace python modules.

rule InstallCSharpMod
{
  InstallBindingsModule $(1) : $(2) ;
}


#--------------------------------------------------------------------------------------------------
# CSharpMod target : module name : source files : install dir : LinkWith : ExternalLibs : desc
#--------------------------------------------------------------------------------------------------

if $(CSHARP.AVAILABLE) = "yes"
{
  if ! $(CSPACEDOTNET.MODULE.PREFIX) && ! $(CSPACEDOTNET.MODULE.SUFFIX)
  {
    switch $(TARGET.OS)
    {
      case WIN32 :
	CSPACEDOTNET.MODULE.PREFIX = ;
	CSPACEDOTNET.MODULE.SUFFIX = .dll ;
      case MACOS_X :
	CSPACEDOTNET.MODULE.PREFIX = lib ;
	CSPACEDOTNET.MODULE.SUFFIX = .dylib ;
      case UNIX :
	CSPACEDOTNET.MODULE.PREFIX = lib ;
	CSPACEDOTNET.MODULE.SUFFIX = .so ;
      case * :
	CSPACEDOTNET.MODULE.PREFIX = lib ;
	CSPACEDOTNET.MODULE.SUFFIX = .so ;
    }
  }

  # Be wary of Jam's variable interpolation: "$(X)foo" expands to nothing if X
  # does not have a value.  (This differs from other interpolators which would
  # expand it to "foo".)
  if ! $(CSPACEDOTNET.MODULE.PREFIX) { CSPACEDOTNET.MODULE.PREFIX = "" ; }
  if ! $(CSPACEDOTNET.MODULE.SUFFIX) { CSPACEDOTNET.MODULE.SUFFIX = "" ; }

  rule CSharpMod
  {
    local module = $(2) ;
    local desc = $(7) ;

    local sources = [ DoSourceGrist $(3) ] ;
    local objects = [ CompileObjects $(sources) ] ;
    local target = $(CSPACEDOTNET.MODULE.PREFIX)$(module)$(CSPACEDOTNET.MODULE.SUFFIX) ;

    NotFile $(<) ;
    Depends $(<) : $(target) ;
    Depends bindings : $(<) ;
    Description $(<) : $(desc) ;
    Help $(<) : "Build the $(desc)" ;

    $(<)_TARGET = $(target) ;
    $(<)_SOURCES = $(sources) ;
    $(<)_OBJECTS = $(objects) ;
    LinkWith $(<) : $(5) ;
    ExternalLibs $(<) : $(6) ;
    CFlags $(<) : $(PLUGIN.CFLAGS) ;
    LFlags $(<) : $(PLUGIN.LFLAGS) $(LINKLIBS) $(COMPILER.LFLAGS.KILLAT) ;

    MakeLocate $(target) : [ ConcatDirs $(LOCATE.OBJECTS) $(4) ] ;
    Depends $(target) : $(objects) ;
    LinkPlugin $(target) : $(objects) ;

    # We install it on the libdir instead of bindings dir because we need that
    # the runtime finds it using P/Invoke, which searches the natives libraries
    # in the system path

    Depends install_bindings : [ DoInstall $(target) : $(libdir) ] ; 

    if $(LINK.DEBUG.INFO.SEPARATE) = "yes"
    {
      SplitDebugInfo $(target) ;
      local debugfile = [ on $(target) GetVar DEBUG_FILE_FULL ] ;
      cleantarget += $(debugfile) ;
      NoCare $(debugfile) ;
      Depends install_bindings : [ DoInstall $(debugfile) :
                                  $(appdatadir) $(4) :
				  $(INSTALL_DATA) ] ;
    }

    Always $(<)clean ;
    NotFile $(<)clean ;
    Clean $(<)clean : $(target) $(objects) ;
    Depends clean : $(<)clean ;
  }

  actions GCSG
  {
    $(CMD.GEN.CSHARP.GLOBALS) $(GCSG.NAMESPACE) $(GCSG.CLASSNAME) $(<) $(GCSG.MODULES)
  }

  #------------------------------------------------------------
  # GenCSharpGlobals target : csharpdir : modules : namespace : classname
  #------------------------------------------------------------

  rule GenCSharpGlobals
  {
    local target = $(1) ;
    local csharpdir = $(2) ;
    local modules = $(3) ;
    local namespace = $(4) ;
    local classname = $(5) ;

    local i ;
    for i in $(modules)
    {
      local source = $(i).cs ;

      if $(csharpdir)
      {
	SEARCH on $(source) = $(csharpdir) ;
        MakeLocate $(source) : $(csharpdir) ;
      }
      else
      {
	SEARCH on $(source) = $(LOCATE_TARGET) ;
        MakeLocate $(source) : $(LOCATE_TARGET) ;
      }
      
      Depends $(target) : $(source) ;
    }

    MakeLocate $(target) : $(csharpdir) ;
    GCSG.NAMESPACE = $(namespace) ;
    GCSG.CLASSNAME = $(classname) ;
    GCSG.MODULES = $(modules) ;
    GCSG $(target) ;
  }

  #---------------------
  # CSharpLib target : input files : references 
  #---------------------

  switch $(DOTNET.RUNTIME)
  {
    case MONO :
      actions InstallGAC1
      {
        $(CMD.GACUTIL) -i $(<) -package $(ASSEMBLY_PACKAGE)
      }
    case PNET :
      actions InstallGAC1
      {
        $(CMD.GACUTIL) -if $(<)
      }
    case MS :
      actions InstallGAC1
      {
	$(CMD.GACUTIL) /if $(<)
      }
    case * :
      actions InstallGAC1
      {
      }
  }
  actions CSC
  {
     $(CMD.CSC) -target:$(3) $(4) -out:$(<) $(>)
  }

  rule CSharpLib
  {
    local target = $(1) ;
    local sources = [ DoSourceGrist $(2) ] ;

    CSC $(target) : $(sources) : library ;
  }


  #----------------------------------
  # InstallGAC assembly : packagename
  rule InstallGAC
  {
    local assembly = $(1) ;
    local packagename = $(2) ;

    ASSEMBLY_PACKAGE = $(packagename) ;
    #Depends install_bindings : [ InstallGAC1 $(assembly) ] ;
  }
}

