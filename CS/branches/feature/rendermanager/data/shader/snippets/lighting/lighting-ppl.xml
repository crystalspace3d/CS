<!--
  Copyright (C) 2008 by Frank Richter

  This library is free software; you can redistribute it and/or
  modify it under the terms of the GNU Library General Public
  License as published by the Free Software Foundation; either
  version 2 of the License, or (at your option) any later version.

  This library is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  Library General Public License for more details.

  You should have received a copy of the GNU Library General Public
  License along with this library; if not, write to the Free
  Software Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
-->
<snippet type="compound">
  <technique priority="100">
    <snippet id="eyeVecWorld" file="/shader/snippets/eye-direction-world.xml" />
    
    <snippet id="lighting">
      <technique priority="100">
	<combiner name="cg" plugin="crystalspace.graphics3d.shader.combiner.glcg" />
      
	<!-- Vector from eye to position -->
	<input name="eyeToSurf" type="direction_world" />
	<input name="position" type="position4_world" />
	<!-- Surface normal -->
	<input name="normal" type="normal_world" />
	
	<input name="lightOffset" type="float" default="value" defval="0"/>
	<input name="maxLights" type="float" default="value" defval="8"/>
	
	<block location="pass">
	  <?Include /shader/snippets/lighting/lighting-tools.inc ?>
	</block>
	
	<block location="cg:variablemap">
	  <?Lighting_Variablemaps?>
	</block>
	
	<block location="cg:definitions">
	  <?Include /shader/snippets/lighting/lightfuncs.cginc ?>
	</block>
	
	<!-- @@@ The Cg combiner process the <uniform ... /> tags *before*
	     xmlshader - so we can't use includes, templates here. Pity -->
	<block location="cg:fragmentIn"
	       file="/shader/snippets/lighting/lighting-cg-input.block" />
	
	<block location="cg:vertexMain">
	  diffuseColor = float3(0);
	  specularColor = float3(0);
	  diffuseColor_attr_perfragment = true;
	  specularColor_attr_perfragment = true;
	</block>
	
	<block location="cg:fragmentMain">
	  diffuseColor = float3(0);
	  specularColor = float3(0);
	  <![CDATA[
	  for (int l = 0; l < maxLights; l++)
	  {
	    if (l >= lightProps.count) break;
	  ]]>
	    
	    int i = lightOffset + l;
	    LightSpaceWorld lightSpace;
	    lightSpace.Init (i, position);
	    
	    Light light = GetCurrentLight (lightSpace, i, normal);
	    float4 lightAttenuationVec = lightProps.attenuationVec[i];
	    ShadowNone shadow;
	    float3 d, s;
	    ComputeLight (lightSpace, light, eyeToSurf, normal, 32,
	    lightProps.colorDiffuse[i], lightProps.colorSpecular[i],
	    lightAttenuationVec, shadow, d, s);
	    
	    diffuseColor += d;
	    specularColor += s;
	  }
	  diffuseColor_attr_perfragment = true;
	  specularColor_attr_perfragment = true;
	</block>
	
	<output name="diffuseColor" type="rgb">
	  <attribute name="perfragment" type="bool" />
	</output>
	<output name="specularColor" type="rgb">
	  <attribute name="perfragment" type="bool" />
	</output>
      </technique>
    </snippet>
    <connection from="eyeVecWorld" to="lighting" />
  </technique>
</snippet>
