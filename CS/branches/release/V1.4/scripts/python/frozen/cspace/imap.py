# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imap', [dirname(__file__)])
        except ImportError:
            import _imap
            return _imap
        if fp is not None:
            try:
                _mod = imp.load_module('_imap', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imap = swig_import_helper()
    del swig_import_helper
else:
    import _imap
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import iengine
import ivideo
import csgfx
import isndsys

def _SetSCFPointer(*args):
  return _imap._SetSCFPointer(*args)
_SetSCFPointer = _imap._SetSCFPointer

def _GetSCFPointer():
  return _imap._GetSCFPointer()
_GetSCFPointer = _imap._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

KEEP_ALL = _imap.KEEP_ALL
KEEP_USED = _imap.KEEP_USED
class iMissingLoaderData(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def MissingMaterial(self, *args): return _imap.iMissingLoaderData_MissingMaterial(self, *args)
    def MissingTexture(self, *args): return _imap.iMissingLoaderData_MissingTexture(self, *args)
    def MissingShader(self, *args): return _imap.iMissingLoaderData_MissingShader(self, *args)
    def MissingFactory(self, *args): return _imap.iMissingLoaderData_MissingFactory(self, *args)
    def MissingMesh(self, *args): return _imap.iMissingLoaderData_MissingMesh(self, *args)
    def MissingSector(self, *args): return _imap.iMissingLoaderData_MissingSector(self, *args)
    def MissingLight(self, *args): return _imap.iMissingLoaderData_MissingLight(self, *args)
    scfGetVersion = staticmethod(_imap.iMissingLoaderData_scfGetVersion)
    __swig_destroy__ = _imap.delete_iMissingLoaderData
    __del__ = lambda self : None;
iMissingLoaderData_swigregister = _imap.iMissingLoaderData_swigregister
iMissingLoaderData_swigregister(iMissingLoaderData)

def iMissingLoaderData_scfGetVersion():
  return _imap.iMissingLoaderData_scfGetVersion()
iMissingLoaderData_scfGetVersion = _imap.iMissingLoaderData_scfGetVersion

class csLoadResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    success = _swig_property(_imap.csLoadResult_success_get, _imap.csLoadResult_success_set)
    result = _swig_property(_imap.csLoadResult_result_get, _imap.csLoadResult_result_set)
    def __init__(self): 
        this = _imap.new_csLoadResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imap.delete_csLoadResult
    __del__ = lambda self : None;
csLoadResult_swigregister = _imap.csLoadResult_swigregister
csLoadResult_swigregister(csLoadResult)

class iLoader(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def LoadSoundSysData(self, *args): return _imap.iLoader_LoadSoundSysData(self, *args)
    def LoadSoundStream(self, *args): return _imap.iLoader_LoadSoundStream(self, *args)
    def LoadSoundWrapper(self, *args): return _imap.iLoader_LoadSoundWrapper(self, *args)
    def LoadImage(self, *args): return _imap.iLoader_LoadImage(self, *args)
    def LoadMeshObjectFactory(self, *args): return _imap.iLoader_LoadMeshObjectFactory(self, *args)
    def LoadMeshObject(self, *args): return _imap.iLoader_LoadMeshObject(self, *args)
    def LoadShader(self, *args): return _imap.iLoader_LoadShader(self, *args)
    def LoadTexture(self, *args): return _imap.iLoader_LoadTexture(self, *args)
    def LoadMapFile(self, *args): return _imap.iLoader_LoadMapFile(self, *args)
    def LoadMap(self, *args): return _imap.iLoader_LoadMap(self, *args)
    def LoadLibraryFile(self, *args): return _imap.iLoader_LoadLibraryFile(self, *args)
    def LoadLibrary(self, *args): return _imap.iLoader_LoadLibrary(self, *args)
    def Load(self, *args): return _imap.iLoader_Load(self, *args)
    def SetAutoRegions(self, *args): return _imap.iLoader_SetAutoRegions(self, *args)
    def GetAutoRegions(self): return _imap.iLoader_GetAutoRegions(self)
    scfGetVersion = staticmethod(_imap.iLoader_scfGetVersion)
    __swig_destroy__ = _imap.delete_iLoader
    __del__ = lambda self : None;
iLoader_swigregister = _imap.iLoader_swigregister
iLoader_swigregister(iLoader)

def iLoader_scfGetVersion():
  return _imap.iLoader_scfGetVersion()
iLoader_scfGetVersion = _imap.iLoader_scfGetVersion

class iLoaderPlugin(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Parse(self, *args): return _imap.iLoaderPlugin_Parse(self, *args)
    scfGetVersion = staticmethod(_imap.iLoaderPlugin_scfGetVersion)
    __swig_destroy__ = _imap.delete_iLoaderPlugin
    __del__ = lambda self : None;
iLoaderPlugin_swigregister = _imap.iLoaderPlugin_swigregister
iLoaderPlugin_swigregister(iLoaderPlugin)

def iLoaderPlugin_scfGetVersion():
  return _imap.iLoaderPlugin_scfGetVersion()
iLoaderPlugin_scfGetVersion = _imap.iLoaderPlugin_scfGetVersion

class iBinaryLoaderPlugin(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Parse(self, *args): return _imap.iBinaryLoaderPlugin_Parse(self, *args)
    scfGetVersion = staticmethod(_imap.iBinaryLoaderPlugin_scfGetVersion)
    __swig_destroy__ = _imap.delete_iBinaryLoaderPlugin
    __del__ = lambda self : None;
iBinaryLoaderPlugin_swigregister = _imap.iBinaryLoaderPlugin_swigregister
iBinaryLoaderPlugin_swigregister(iBinaryLoaderPlugin)

def iBinaryLoaderPlugin_scfGetVersion():
  return _imap.iBinaryLoaderPlugin_scfGetVersion()
iBinaryLoaderPlugin_scfGetVersion = _imap.iBinaryLoaderPlugin_scfGetVersion

class iSaver(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SaveMapFile(self, *args): return _imap.iSaver_SaveMapFile(self, *args)
    def SaveAllRegions(self): return _imap.iSaver_SaveAllRegions(self)
    def SaveRegionFile(self, *args): return _imap.iSaver_SaveRegionFile(self, *args)
    def SaveRegion(self, *args): return _imap.iSaver_SaveRegion(self, *args)
    def SavePortal(self, *args): return _imap.iSaver_SavePortal(self, *args)
    __swig_destroy__ = _imap.delete_iSaver
    __del__ = lambda self : None;
iSaver_swigregister = _imap.iSaver_swigregister
iSaver_swigregister(iSaver)

def CS_REQUEST_LEVELLOADER ():
  return core.CS_REQUEST_PLUGIN("crystalspace.level.loader", iLoader)



