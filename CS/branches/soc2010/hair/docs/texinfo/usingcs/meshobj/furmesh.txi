@c -*-texinfo-*-
@node MeshObject Furmesh, MeshObject
@subsection Furmesh Mesh Object
@cindex MeshObject
@cindex 3D Sprite
@cindex @code{iMeshObject}
@cindex @code{iMeshObjectFactory}
@cindex @code{iMeshObjectType}
@cindex @code{iFurMeshType}
@cindex @code{iFurMeshFactory}

@emph{Written by Alexandru - Teodor Voicu,
@email{voicualexandruteodor@@gmail.com}.}

A Furmesh is a set of 3D triangles (just like a 3D sprite) that is used to 
create both hairs and furs on base meshes (currently only animeshes are supported).
Furmeshes can update their position based on physics or on the base mesh's 
animation, via the Furmesh Physics Control. Defining complex shaders, that 
can have lookup textures, updated whenever needed, is done via the Furmesh
Strand Generator. You can find some other info about the Furmesh plugin on 
this blog: @uref{http://hairrendering.wordpress.com/}.

The following @sc{scf} class names are used (for @code{csLoadPlugin}):

@itemize @bullet
@item
Type plugin: @code{crystalspace.mesh.furmesh}
@end itemize

@subsubheading Basic Structure

Objects in this plugin implement the following @sc{scf} interfaces, which you
can retrieve with @code{scfQueryInterface}:

@itemize @bullet
@item
@emph{MeshObject}
@itemize @bullet
@item
Implements @samp{iMeshObject}
@item
Implements @samp{iFurMesh}
@end itemize
@item
@emph{MeshObjectFactory}
@itemize @bullet
@item
Implements @samp{iMeshObjectFactory}
@item
Implements @samp{iFurMeshFactory}
@end itemize
@item
@emph{MeshObjectType}
@itemize @bullet
@item
Implements @samp{iMeshObjectType}
@end itemize
@end itemize

@subsubheading Furmesh Data Structures

Because a Furmesh can update its geometry by being synchronized with various
physics objects, such as Bullet ropes for hairs (which are computationally 
expensive), only a small part (less than 1%) of the geometry really has such an
external object attached.

This lead to creating two types of data structures: guide furs, which always 
have a corresponding external object and fur strands, which have references to 
three close guide furs in order to update their position.

Guide furs are created on each vertex of the base mesh, the mesh on which fur
will grow, and are never displayed, except only for debug purpose.

Fur strands are generated by iterating through the triangles specified by the
base mesh and choosing three random barycentric coordinates in order to specify
their position relative to three guide furs. The barycentric coordinates are used 
both to update the position of fur strands, using the guide furs and to generate 
UV coordinates.

@subsubheading Furmesh Geometry

In order to keep the number of geometry as low as possible, fur strands are 
represented as triangle strips that always face the camera, not as very thin 
cylinders like in reality. Because of the always facing the camera constraint,
all the geometry related data from the Furmesh Factory can be computed more
efficiently, directly when updating the fur strands. This is the reason why the 
Furmesh Factory doesn't have any methods to compute normals, tangents or binormals, 
but only gives access to these iRenderBuffers.

@subsubheading Furmesh LOD System

Due to the high number of fur strands a LOD system had to be used, especially when 
the viewer was further away from the Furmesh and it could be rendered at lower 
quality. Apart from displaying fewer fur strands, the number of guide furs vary as 
well. In order to make this possible another type of fur structure had to be added,
LOD guide furs, which on lower LOD settings act as normal fur strands, while on 
higher LOD act as guide furs. The methods that allow setting various LODs are: 
@code{SetGuideLOD()}, @code{SetStrandLOD()}, or  @code{SetLOD()} which acts as an
overall LOD function, calling both previous defined methods.

@subsubheading Object Loader 

Here is a list of all the tags supported by a Furmesh object and their meaning 
(these tags should be specify in a custom, base, material from the base mesh): 
@itemize @bullet
@item @samp{strandWidth}
This is a float variable used to set the width of a fur strand:
@samp{<shadervar type="float" name="strandWidth">0.001</shadervar>}.
@item @samp{displaceDistance}
This is a float variable used to set the distance between the Furmesh and the base
mesh:
@samp{<shadervar type="float" name="displaceDistance">0.02</shadervar>}.
@item @samp{density map}
This is a UV greyscale texture of the base mesh, giving information about the density
of the Furmesh, based on areas. White means the highest density, while black means no
furs.
@samp{<shadervar type="texture" name="density map">krystal_skull_densitymap</shadervar>}.
@item @samp{densityFactorGuideHairs}
This is a float variable used to specify what is the maximum density for LOD guide furs.
@samp{<shadervar type="float" name="densityFactorGuideHairs">10</shadervar>}.
@item @samp{densityFactorHairStrands}
This is a float variable used to specify what is the maximum density for fur strands.
@samp{<shadervar type="float" name="densityFactorHairStrands">120</shadervar>}.
@item @samp{height map}
This is a UV greyscale texture of the base mesh, giving information about the height
of the Furmesh, based on areas. White means the biggest height, while black means 0 height.
@samp{<shadervar type="texture" name="density map">krystal_skull_heightmap</shadervar>}.
@item @samp{heightFactor}
This is a float variable used to specify what is the maximum height for furs.
@samp{<shadervar type="float" name="heightFactor">0.4</shadervar>}.
@item @samp{controlPointsDistance}
This is a float variable used to set the distance between points on a fur strand. 
@samp{<shadervar type="float" name="controlPointsDistance">0.05</shadervar>}.
@item @samp{positionDeviation}
This is a float variable used to set the percentage of the maximum deviation a fur strand
might have. 
@samp{<shadervar type="float" name="positionDeviation">0.005</shadervar>}.
@item @samp{growTangents}
This is an integer variable, specifying if guide furs should initially grow based on normal or
tangent direction. While normal direction is good for small furs, tangent direction might be
used for longer static furs.
@samp{<shadervar type="int" name="growTangents">1</shadervar>}.
@end itemize

@subsubheading Creating a Furmesh

A typical way of creating programmatically:

@example
// First create the factory:
csRef<CS::Mesh::iFurMeshType> furMeshType = 
  csQueryRegistry<CS::Mesh::iFurMeshType> (hairTest->object_reg);
csRef<iMeshObjectFactory> imof = furMeshType->NewFactory();
csRef<iMeshFactoryWrapper> imfw = 
  hairTest->engine->CreateMeshFactory(imof, "hair_factory");
csRef<iMeshWrapper> hairMesh = hairTest->engine->
  CreateMeshWrapper (imfw, "hair_mesh_wrapper", hairTest->room, csVector3 (0));

// Get reference to the iFurMesh interface
furMesh = scfQueryInterface<CS::Mesh::iFurMesh>(imo);
@dots{}
furMesh->SetPhysicsControl(animationPhysicsControl);
furMesh->SetFurStrandGenerator(hairStrandGenerator);
@dots{}
furMesh->SetMeshFactory(animeshFactory);
furMesh->SetMeshFactorySubMesh(animesh -> GetSubMesh(1)->GetFactorySubMesh());
furMesh->SetBaseMaterial(skullMaterial->GetMaterial());
furMesh->GenerateGeometry(hairTest->view, hairTest->room);
furMesh->SetGuideLOD(0);
furMesh->SetStrandLOD(1);
@end example
