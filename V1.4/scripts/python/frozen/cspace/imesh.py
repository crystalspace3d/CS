# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.40
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_imesh', [dirname(__file__)])
        except ImportError:
            import _imesh
            return _imesh
        if fp is not None:
            try:
                _mod = imp.load_module('_imesh', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _imesh = swig_import_helper()
    del swig_import_helper
else:
    import _imesh
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


import core
import ivaria
import csgeom
import ivideo
import csgfx

def _SetSCFPointer(*args):
  return _imesh._SetSCFPointer(*args)
_SetSCFPointer = _imesh._SetSCFPointer

def _GetSCFPointer():
  return _imesh._GetSCFPointer()
_GetSCFPointer = _imesh._GetSCFPointer
if not "core" in dir():
    core = __import__("cspace").__dict__["core"]
core.AddSCFLink(_SetSCFPointer)
CSMutableArrayHelper = core.CSMutableArrayHelper

class iObjectModelListener(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def ObjectModelChanged(self, *args): return _imesh.iObjectModelListener_ObjectModelChanged(self, *args)
    scfGetVersion = staticmethod(_imesh.iObjectModelListener_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iObjectModelListener
    __del__ = lambda self : None;
iObjectModelListener_swigregister = _imesh.iObjectModelListener_swigregister
iObjectModelListener_swigregister(iObjectModelListener)

def iObjectModelListener_scfGetVersion():
  return _imesh.iObjectModelListener_scfGetVersion()
iObjectModelListener_scfGetVersion = _imesh.iObjectModelListener_scfGetVersion

class iTriangleMeshIterator(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def HasNext(self): return _imesh.iTriangleMeshIterator_HasNext(self)
    def Next(self, *args): return _imesh.iTriangleMeshIterator_Next(self, *args)
    scfGetVersion = staticmethod(_imesh.iTriangleMeshIterator_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTriangleMeshIterator
    __del__ = lambda self : None;
iTriangleMeshIterator_swigregister = _imesh.iTriangleMeshIterator_swigregister
iTriangleMeshIterator_swigregister(iTriangleMeshIterator)

def iTriangleMeshIterator_scfGetVersion():
  return _imesh.iTriangleMeshIterator_scfGetVersion()
iTriangleMeshIterator_scfGetVersion = _imesh.iTriangleMeshIterator_scfGetVersion

class iObjectModel(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetShapeNumber(self): return _imesh.iObjectModel_GetShapeNumber(self)
    def GetTriangleData(self, *args): return _imesh.iObjectModel_GetTriangleData(self, *args)
    def GetTriangleDataIterator(self): return _imesh.iObjectModel_GetTriangleDataIterator(self)
    def SetTriangleData(self, *args): return _imesh.iObjectModel_SetTriangleData(self, *args)
    def IsTriangleDataSet(self, *args): return _imesh.iObjectModel_IsTriangleDataSet(self, *args)
    def ResetTriangleData(self, *args): return _imesh.iObjectModel_ResetTriangleData(self, *args)
    def GetTerraFormerColldet(self): return _imesh.iObjectModel_GetTerraFormerColldet(self)
    def GetTerrainColldet(self): return _imesh.iObjectModel_GetTerrainColldet(self)
    def GetObjectBoundingBox(self): return _imesh.iObjectModel_GetObjectBoundingBox(self)
    def SetObjectBoundingBox(self, *args): return _imesh.iObjectModel_SetObjectBoundingBox(self, *args)
    def GetRadius(self, *args): return _imesh.iObjectModel_GetRadius(self, *args)
    def AddListener(self, *args): return _imesh.iObjectModel_AddListener(self, *args)
    def RemoveListener(self, *args): return _imesh.iObjectModel_RemoveListener(self, *args)
    scfGetVersion = staticmethod(_imesh.iObjectModel_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iObjectModel
    __del__ = lambda self : None;
iObjectModel_swigregister = _imesh.iObjectModel_swigregister
iObjectModel_swigregister(iObjectModel)

def iObjectModel_scfGetVersion():
  return _imesh.iObjectModel_scfGetVersion()
iObjectModel_scfGetVersion = _imesh.iObjectModel_scfGetVersion

class iGeneralMeshSubMesh(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetIndices(self): return _imesh.iGeneralMeshSubMesh_GetIndices(self)
    def GetMaterial(self): return _imesh.iGeneralMeshSubMesh_GetMaterial(self)
    def GetName(self): return _imesh.iGeneralMeshSubMesh_GetName(self)
    def GetMixmode(self): return _imesh.iGeneralMeshSubMesh_GetMixmode(self)
    def SetMaterial(self, *args): return _imesh.iGeneralMeshSubMesh_SetMaterial(self, *args)
    def GetZMode(self): return _imesh.iGeneralMeshSubMesh_GetZMode(self)
    def SetZMode(self, *args): return _imesh.iGeneralMeshSubMesh_SetZMode(self, *args)
    def GetRenderPriority(self): return _imesh.iGeneralMeshSubMesh_GetRenderPriority(self)
    def SetRenderPriority(self, *args): return _imesh.iGeneralMeshSubMesh_SetRenderPriority(self, *args)
    def SetMixmode(self, *args): return _imesh.iGeneralMeshSubMesh_SetMixmode(self, *args)
    def SetBack2Front(self, *args): return _imesh.iGeneralMeshSubMesh_SetBack2Front(self, *args)
    def GetBack2Front(self): return _imesh.iGeneralMeshSubMesh_GetBack2Front(self)
    __swig_destroy__ = _imesh.delete_iGeneralMeshSubMesh
    __del__ = lambda self : None;
iGeneralMeshSubMesh_swigregister = _imesh.iGeneralMeshSubMesh_swigregister
iGeneralMeshSubMesh_swigregister(iGeneralMeshSubMesh)

class iGeneralMeshCommonState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetLighting(self, *args): return _imesh.iGeneralMeshCommonState_SetLighting(self, *args)
    def IsLighting(self): return _imesh.iGeneralMeshCommonState_IsLighting(self)
    def SetManualColors(self, *args): return _imesh.iGeneralMeshCommonState_SetManualColors(self, *args)
    def IsManualColors(self): return _imesh.iGeneralMeshCommonState_IsManualColors(self)
    def SetShadowCasting(self, *args): return _imesh.iGeneralMeshCommonState_SetShadowCasting(self, *args)
    def IsShadowCasting(self): return _imesh.iGeneralMeshCommonState_IsShadowCasting(self)
    def SetShadowReceiving(self, *args): return _imesh.iGeneralMeshCommonState_SetShadowReceiving(self, *args)
    def IsShadowReceiving(self): return _imesh.iGeneralMeshCommonState_IsShadowReceiving(self)
    def GetRenderBufferCount(self): return _imesh.iGeneralMeshCommonState_GetRenderBufferCount(self)
    def GetRenderBufferName(self, *args): return _imesh.iGeneralMeshCommonState_GetRenderBufferName(self, *args)
    def AddRenderBuffer(self, *args): return _imesh.iGeneralMeshCommonState_AddRenderBuffer(self, *args)
    def RemoveRenderBuffer(self, *args): return _imesh.iGeneralMeshCommonState_RemoveRenderBuffer(self, *args)
    def GetRenderBuffer(self, *args): return _imesh.iGeneralMeshCommonState_GetRenderBuffer(self, *args)
    __swig_destroy__ = _imesh.delete_iGeneralMeshCommonState
    __del__ = lambda self : None;
iGeneralMeshCommonState_swigregister = _imesh.iGeneralMeshCommonState_swigregister
iGeneralMeshCommonState_swigregister(iGeneralMeshCommonState)

class iGeneralMeshState(iGeneralMeshCommonState):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetAnimationControl(self, *args): return _imesh.iGeneralMeshState_SetAnimationControl(self, *args)
    def GetAnimationControl(self): return _imesh.iGeneralMeshState_GetAnimationControl(self)
    def FindSubMesh(self, *args): return _imesh.iGeneralMeshState_FindSubMesh(self, *args)
    scfGetVersion = staticmethod(_imesh.iGeneralMeshState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iGeneralMeshState
    __del__ = lambda self : None;
iGeneralMeshState_swigregister = _imesh.iGeneralMeshState_swigregister
iGeneralMeshState_swigregister(iGeneralMeshState)

def iGeneralMeshState_scfGetVersion():
  return _imesh.iGeneralMeshState_scfGetVersion()
iGeneralMeshState_scfGetVersion = _imesh.iGeneralMeshState_scfGetVersion

class iGeneralFactoryState(iGeneralMeshCommonState):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetColor(self, *args): return _imesh.iGeneralFactoryState_SetColor(self, *args)
    def GetColor(self): return _imesh.iGeneralFactoryState_GetColor(self)
    def AddVertex(self, *args): return _imesh.iGeneralFactoryState_AddVertex(self, *args)
    def SetVertexCount(self, *args): return _imesh.iGeneralFactoryState_SetVertexCount(self, *args)
    def GetVertexCount(self): return _imesh.iGeneralFactoryState_GetVertexCount(self)
    def GetVertices(self):
      return CSMutableArrayHelper(self.GetVertexByIndex, self.GetVertexCount)


    def GetTexels(self):
      return CSMutableArrayHelper(self.GetTexelByIndex, self.GetVertexCount)


    def GetNormals(self):
      # iGeneralFactoryState::GetVertices()
      return CSMutableArrayHelper(self.GetNormalByIndex, self.GetVertexCount)


    def GetColors(self):
      return CSMutableArrayHelper(self.GetColorByIndex, self.GetVertexCount)


    def AddTriangle(self, *args): return _imesh.iGeneralFactoryState_AddTriangle(self, *args)
    def SetTriangleCount(self, *args): return _imesh.iGeneralFactoryState_SetTriangleCount(self, *args)
    def GetTriangleCount(self): return _imesh.iGeneralFactoryState_GetTriangleCount(self)
    def GetTriangles(self):
      return CSMutableArrayHelper(self.GetTriangleByIndex, self.GetTriangleCount)


    def Invalidate(self): return _imesh.iGeneralFactoryState_Invalidate(self)
    def CalculateNormals(self, compress = True): return _imesh.iGeneralFactoryState_CalculateNormals(self, compress)
    def Compress(self): return _imesh.iGeneralFactoryState_Compress(self)
    def GenerateBox(self, *args): return _imesh.iGeneralFactoryState_GenerateBox(self, *args)
    def GenerateCapsule(self, *args): return _imesh.iGeneralFactoryState_GenerateCapsule(self, *args)
    def GenerateSphere(self, *args): return _imesh.iGeneralFactoryState_GenerateSphere(self, *args)
    def SetBack2Front(self, *args): return _imesh.iGeneralFactoryState_SetBack2Front(self, *args)
    def IsAutoNormals(self): return _imesh.iGeneralFactoryState_IsAutoNormals(self)
    def IsBack2Front(self): return _imesh.iGeneralFactoryState_IsBack2Front(self)
    def SetAnimationControlFactory(self, *args): return _imesh.iGeneralFactoryState_SetAnimationControlFactory(self, *args)
    def GetAnimationControlFactory(self): return _imesh.iGeneralFactoryState_GetAnimationControlFactory(self)
    def ClearSubMeshes(self): return _imesh.iGeneralFactoryState_ClearSubMeshes(self)
    def AddSubMesh(self, *args): return _imesh.iGeneralFactoryState_AddSubMesh(self, *args)
    def FindSubMesh(self, *args): return _imesh.iGeneralFactoryState_FindSubMesh(self, *args)
    def DeleteSubMesh(self, *args): return _imesh.iGeneralFactoryState_DeleteSubMesh(self, *args)
    def GetSubMeshCount(self): return _imesh.iGeneralFactoryState_GetSubMeshCount(self)
    def GetSubMesh(self, *args): return _imesh.iGeneralFactoryState_GetSubMesh(self, *args)
    def DisableAutoNormals(self): return _imesh.iGeneralFactoryState_DisableAutoNormals(self)
    def GetVertexByIndex(self, *args): return _imesh.iGeneralFactoryState_GetVertexByIndex(self, *args)
    def GetTexelByIndex(self, *args): return _imesh.iGeneralFactoryState_GetTexelByIndex(self, *args)
    def GetNormalByIndex(self, *args): return _imesh.iGeneralFactoryState_GetNormalByIndex(self, *args)
    def GetTriangleByIndex(self, *args): return _imesh.iGeneralFactoryState_GetTriangleByIndex(self, *args)
    def GetColorByIndex(self, *args): return _imesh.iGeneralFactoryState_GetColorByIndex(self, *args)
    def GetVerticesAsBuffer(self): return _imesh.iGeneralFactoryState_GetVerticesAsBuffer(self)
    def GetNormalsAsBuffer(self): return _imesh.iGeneralFactoryState_GetNormalsAsBuffer(self)
    def GetColorsAsBuffer(self): return _imesh.iGeneralFactoryState_GetColorsAsBuffer(self)
    def GetTrianglesAsBuffer(self): return _imesh.iGeneralFactoryState_GetTrianglesAsBuffer(self)
    scfGetVersion = staticmethod(_imesh.iGeneralFactoryState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iGeneralFactoryState
    __del__ = lambda self : None;
iGeneralFactoryState_swigregister = _imesh.iGeneralFactoryState_swigregister
iGeneralFactoryState_swigregister(iGeneralFactoryState)

def iGeneralFactoryState_scfGetVersion():
  return _imesh.iGeneralFactoryState_scfGetVersion()
iGeneralFactoryState_scfGetVersion = _imesh.iGeneralFactoryState_scfGetVersion

class iGenMeshAnimationControl(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AnimatesVertices(self): return _imesh.iGenMeshAnimationControl_AnimatesVertices(self)
    def AnimatesTexels(self): return _imesh.iGenMeshAnimationControl_AnimatesTexels(self)
    def AnimatesNormals(self): return _imesh.iGenMeshAnimationControl_AnimatesNormals(self)
    def AnimatesColors(self): return _imesh.iGenMeshAnimationControl_AnimatesColors(self)
    def Update(self, *args): return _imesh.iGenMeshAnimationControl_Update(self, *args)
    def UpdateVertices(self, *args): return _imesh.iGenMeshAnimationControl_UpdateVertices(self, *args)
    def UpdateTexels(self, *args): return _imesh.iGenMeshAnimationControl_UpdateTexels(self, *args)
    def UpdateNormals(self, *args): return _imesh.iGenMeshAnimationControl_UpdateNormals(self, *args)
    def UpdateColors(self, *args): return _imesh.iGenMeshAnimationControl_UpdateColors(self, *args)
    __swig_destroy__ = _imesh.delete_iGenMeshAnimationControl
    __del__ = lambda self : None;
iGenMeshAnimationControl_swigregister = _imesh.iGenMeshAnimationControl_swigregister
iGenMeshAnimationControl_swigregister(iGenMeshAnimationControl)

class iGenMeshAnimationControl1_4(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Update(self, *args): return _imesh.iGenMeshAnimationControl1_4_Update(self, *args)
    __swig_destroy__ = _imesh.delete_iGenMeshAnimationControl1_4
    __del__ = lambda self : None;
iGenMeshAnimationControl1_4_swigregister = _imesh.iGenMeshAnimationControl1_4_swigregister
iGenMeshAnimationControl1_4_swigregister(iGenMeshAnimationControl1_4)

class iGenMeshAnimationControlFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateAnimationControl(self, *args): return _imesh.iGenMeshAnimationControlFactory_CreateAnimationControl(self, *args)
    def Load(self, *args): return _imesh.iGenMeshAnimationControlFactory_Load(self, *args)
    def Save(self, *args): return _imesh.iGenMeshAnimationControlFactory_Save(self, *args)
    __swig_destroy__ = _imesh.delete_iGenMeshAnimationControlFactory
    __del__ = lambda self : None;
iGenMeshAnimationControlFactory_swigregister = _imesh.iGenMeshAnimationControlFactory_swigregister
iGenMeshAnimationControlFactory_swigregister(iGenMeshAnimationControlFactory)

class iGenMeshAnimationControlType(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateAnimationControlFactory(self): return _imesh.iGenMeshAnimationControlType_CreateAnimationControlFactory(self)
    __swig_destroy__ = _imesh.delete_iGenMeshAnimationControlType
    __del__ = lambda self : None;
iGenMeshAnimationControlType_swigregister = _imesh.iGenMeshAnimationControlType_swigregister
iGenMeshAnimationControlType_swigregister(iGenMeshAnimationControlType)

CS_BTT_NONE = _imesh.CS_BTT_NONE
CS_BTT_SCRIPT = _imesh.CS_BTT_SCRIPT
CS_BTT_RIGID_BODY = _imesh.CS_BTT_RIGID_BODY
CS_BGT_NONE = _imesh.CS_BGT_NONE
CS_BGT_BOX = _imesh.CS_BGT_BOX
CS_BGT_SPHERE = _imesh.CS_BGT_SPHERE
CS_BGT_CYLINDER = _imesh.CS_BGT_CYLINDER
class iSkeletonBone(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonBone_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonBone_SetName(self, *args)
    def GetTransform(self): return _imesh.iSkeletonBone_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iSkeletonBone_SetTransform(self, *args)
    def GetFullTransform(self): return _imesh.iSkeletonBone_GetFullTransform(self)
    def SetParent(self, *args): return _imesh.iSkeletonBone_SetParent(self, *args)
    def GetParent(self): return _imesh.iSkeletonBone_GetParent(self)
    def GetChildrenCount(self): return _imesh.iSkeletonBone_GetChildrenCount(self)
    def GetChild(self, *args): return _imesh.iSkeletonBone_GetChild(self, *args)
    def FindChild(self, *args): return _imesh.iSkeletonBone_FindChild(self, *args)
    def FindChildIndex(self, *args): return _imesh.iSkeletonBone_FindChildIndex(self, *args)
    def SetSkinBox(self, *args): return _imesh.iSkeletonBone_SetSkinBox(self, *args)
    def GetSkinBox(self): return _imesh.iSkeletonBone_GetSkinBox(self)
    def SetUpdateCallback(self, *args): return _imesh.iSkeletonBone_SetUpdateCallback(self, *args)
    def GetUpdateCallback(self): return _imesh.iSkeletonBone_GetUpdateCallback(self)
    def GetFactory(self): return _imesh.iSkeletonBone_GetFactory(self)
    def SetTransformMode(self, *args): return _imesh.iSkeletonBone_SetTransformMode(self, *args)
    def GetTransformMode(self): return _imesh.iSkeletonBone_GetTransformMode(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonBone_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonBone
    __del__ = lambda self : None;
iSkeletonBone_swigregister = _imesh.iSkeletonBone_swigregister
iSkeletonBone_swigregister(iSkeletonBone)

def iSkeletonBone_scfGetVersion():
  return _imesh.iSkeletonBone_scfGetVersion()
iSkeletonBone_scfGetVersion = _imesh.iSkeletonBone_scfGetVersion

class iSkeletonBoneUpdateCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def UpdateTransform(self, *args): return _imesh.iSkeletonBoneUpdateCallback_UpdateTransform(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonBoneUpdateCallback
    __del__ = lambda self : None;
iSkeletonBoneUpdateCallback_swigregister = _imesh.iSkeletonBoneUpdateCallback_swigregister
iSkeletonBoneUpdateCallback_swigregister(iSkeletonBoneUpdateCallback)

class iSkeletonAnimationKeyFrame(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonAnimationKeyFrame_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonAnimationKeyFrame_SetName(self, *args)
    def GetDuration(self): return _imesh.iSkeletonAnimationKeyFrame_GetDuration(self)
    def SetDuration(self, *args): return _imesh.iSkeletonAnimationKeyFrame_SetDuration(self, *args)
    def GetTransformsCount(self): return _imesh.iSkeletonAnimationKeyFrame_GetTransformsCount(self)
    def AddTransform(self, *args): return _imesh.iSkeletonAnimationKeyFrame_AddTransform(self, *args)
    def GetTransform(self, *args): return _imesh.iSkeletonAnimationKeyFrame_GetTransform(self, *args)
    def SetTransform(self, *args): return _imesh.iSkeletonAnimationKeyFrame_SetTransform(self, *args)
    def GetKeyFrameData(self, *args): return _imesh.iSkeletonAnimationKeyFrame_GetKeyFrameData(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimationKeyFrame
    __del__ = lambda self : None;
iSkeletonAnimationKeyFrame_swigregister = _imesh.iSkeletonAnimationKeyFrame_swigregister
iSkeletonAnimationKeyFrame_swigregister(iSkeletonAnimationKeyFrame)

class iSkeletonAnimation(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonAnimation_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonAnimation_SetName(self, *args)
    def GetTime(self): return _imesh.iSkeletonAnimation_GetTime(self)
    def SetTime(self, *args): return _imesh.iSkeletonAnimation_SetTime(self, *args)
    def GetSpeed(self): return _imesh.iSkeletonAnimation_GetSpeed(self)
    def SetSpeed(self, *args): return _imesh.iSkeletonAnimation_SetSpeed(self, *args)
    def SetFactor(self, *args): return _imesh.iSkeletonAnimation_SetFactor(self, *args)
    def GetFactor(self): return _imesh.iSkeletonAnimation_GetFactor(self)
    def SetLoop(self, *args): return _imesh.iSkeletonAnimation_SetLoop(self, *args)
    def GetLoop(self): return _imesh.iSkeletonAnimation_GetLoop(self)
    def CreateFrame(self, *args): return _imesh.iSkeletonAnimation_CreateFrame(self, *args)
    def GetFramesCount(self): return _imesh.iSkeletonAnimation_GetFramesCount(self)
    def GetFrame(self, *args): return _imesh.iSkeletonAnimation_GetFrame(self, *args)
    def FindFrameIndex(self, *args): return _imesh.iSkeletonAnimation_FindFrameIndex(self, *args)
    def RemoveFrame(self, *args): return _imesh.iSkeletonAnimation_RemoveFrame(self, *args)
    def RemoveAllFrames(self): return _imesh.iSkeletonAnimation_RemoveAllFrames(self)
    def RecalcSpline(self): return _imesh.iSkeletonAnimation_RecalcSpline(self)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimation
    __del__ = lambda self : None;
iSkeletonAnimation_swigregister = _imesh.iSkeletonAnimation_swigregister
iSkeletonAnimation_swigregister(iSkeletonAnimation)

class iSkeletonAnimationCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Execute(self, *args): return _imesh.iSkeletonAnimationCallback_Execute(self, *args)
    def OnFinish(self, *args): return _imesh.iSkeletonAnimationCallback_OnFinish(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimationCallback
    __del__ = lambda self : None;
iSkeletonAnimationCallback_swigregister = _imesh.iSkeletonAnimationCallback_swigregister
iSkeletonAnimationCallback_swigregister(iSkeletonAnimationCallback)

class iSkeletonUpdateCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Execute(self, *args): return _imesh.iSkeletonUpdateCallback_Execute(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonUpdateCallback
    __del__ = lambda self : None;
iSkeletonUpdateCallback_swigregister = _imesh.iSkeletonUpdateCallback_swigregister
iSkeletonUpdateCallback_swigregister(iSkeletonUpdateCallback)

class iSkeletonAnimationInstance(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSpeed(self): return _imesh.iSkeletonAnimationInstance_GetSpeed(self)
    def SetSpeed(self, *args): return _imesh.iSkeletonAnimationInstance_SetSpeed(self, *args)
    def SetFactor(self, *args): return _imesh.iSkeletonAnimationInstance_SetFactor(self, *args)
    def GetFactor(self): return _imesh.iSkeletonAnimationInstance_GetFactor(self)
    def GetDuration(self): return _imesh.iSkeletonAnimationInstance_GetDuration(self)
    def SetDuration(self, *args): return _imesh.iSkeletonAnimationInstance_SetDuration(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimationInstance
    __del__ = lambda self : None;
iSkeletonAnimationInstance_swigregister = _imesh.iSkeletonAnimationInstance_swigregister
iSkeletonAnimationInstance_swigregister(iSkeletonAnimationInstance)

class iSkeleton(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeleton_GetName(self)
    def SetName(self, *args): return _imesh.iSkeleton_SetName(self, *args)
    def GetBonesCount(self): return _imesh.iSkeleton_GetBonesCount(self)
    def GetBone(self, *args): return _imesh.iSkeleton_GetBone(self, *args)
    def FindBone(self, *args): return _imesh.iSkeleton_FindBone(self, *args)
    def FindBoneIndex(self, *args): return _imesh.iSkeleton_FindBoneIndex(self, *args)
    def Execute(self, *args): return _imesh.iSkeleton_Execute(self, *args)
    def Append(self, *args): return _imesh.iSkeleton_Append(self, *args)
    def Play(self, *args): return _imesh.iSkeleton_Play(self, *args)
    def ClearPendingAnimations(self): return _imesh.iSkeleton_ClearPendingAnimations(self)
    def GetAnimationsCount(self): return _imesh.iSkeleton_GetAnimationsCount(self)
    def GetAnimation(self, *args): return _imesh.iSkeleton_GetAnimation(self, *args)
    def FindAnimation(self, *args): return _imesh.iSkeleton_FindAnimation(self, *args)
    def FindSocket(self, *args): return _imesh.iSkeleton_FindSocket(self, *args)
    def StopAll(self): return _imesh.iSkeleton_StopAll(self)
    def Stop(self, *args): return _imesh.iSkeleton_Stop(self, *args)
    def GetFactory(self): return _imesh.iSkeleton_GetFactory(self)
    def SetAnimationCallback(self, *args): return _imesh.iSkeleton_SetAnimationCallback(self, *args)
    def AddUpdateCallback(self, *args): return _imesh.iSkeleton_AddUpdateCallback(self, *args)
    def GetUpdateCallbacksCount(self): return _imesh.iSkeleton_GetUpdateCallbacksCount(self)
    def GetUpdateCallback(self, *args): return _imesh.iSkeleton_GetUpdateCallback(self, *args)
    def RemoveUpdateCallback(self, *args): return _imesh.iSkeleton_RemoveUpdateCallback(self, *args)
    def UpdateAnimation(self, *args): return _imesh.iSkeleton_UpdateAnimation(self, *args)
    def UpdateBones(self): return _imesh.iSkeleton_UpdateBones(self)
    scfGetVersion = staticmethod(_imesh.iSkeleton_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeleton
    __del__ = lambda self : None;
iSkeleton_swigregister = _imesh.iSkeleton_swigregister
iSkeleton_swigregister(iSkeleton)

def iSkeleton_scfGetVersion():
  return _imesh.iSkeleton_scfGetVersion()
iSkeleton_scfGetVersion = _imesh.iSkeleton_scfGetVersion

class iSkeletonSocket(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonSocket_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonSocket_SetName(self, *args)
    def GetTransform(self): return _imesh.iSkeletonSocket_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iSkeletonSocket_SetTransform(self, *args)
    def GetFullTransform(self): return _imesh.iSkeletonSocket_GetFullTransform(self)
    def SetBone(self, *args): return _imesh.iSkeletonSocket_SetBone(self, *args)
    def GetBone(self): return _imesh.iSkeletonSocket_GetBone(self)
    def SetSceneNode(self, *args): return _imesh.iSkeletonSocket_SetSceneNode(self, *args)
    def GetSceneNode(self): return _imesh.iSkeletonSocket_GetSceneNode(self)
    def GetFactory(self): return _imesh.iSkeletonSocket_GetFactory(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonSocket_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonSocket
    __del__ = lambda self : None;
iSkeletonSocket_swigregister = _imesh.iSkeletonSocket_swigregister
iSkeletonSocket_swigregister(iSkeletonSocket)

def iSkeletonSocket_scfGetVersion():
  return _imesh.iSkeletonSocket_scfGetVersion()
iSkeletonSocket_scfGetVersion = _imesh.iSkeletonSocket_scfGetVersion

class iSkeletonBoneRagdollInfo(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetEnabled(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetEnabled(self, *args)
    def GetEnabled(self): return _imesh.iSkeletonBoneRagdollInfo_GetEnabled(self)
    def SetAttachToParent(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetAttachToParent(self, *args)
    def GetAttachToParent(self): return _imesh.iSkeletonBoneRagdollInfo_GetAttachToParent(self)
    def SetGeomName(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetGeomName(self, *args)
    def GetGeomName(self): return _imesh.iSkeletonBoneRagdollInfo_GetGeomName(self)
    def SetGeomType(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetGeomType(self, *args)
    def GetGeomType(self): return _imesh.iSkeletonBoneRagdollInfo_GetGeomType(self)
    def SetGeomDimensions(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetGeomDimensions(self, *args)
    def GetGeomDimensions(self): return _imesh.iSkeletonBoneRagdollInfo_GetGeomDimensions(self)
    def SetFriction(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetFriction(self, *args)
    def GetFriction(self): return _imesh.iSkeletonBoneRagdollInfo_GetFriction(self)
    def SetElasticity(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetElasticity(self, *args)
    def GetElasticity(self): return _imesh.iSkeletonBoneRagdollInfo_GetElasticity(self)
    def SetSoftness(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetSoftness(self, *args)
    def GetSoftness(self): return _imesh.iSkeletonBoneRagdollInfo_GetSoftness(self)
    def SetSlip(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetSlip(self, *args)
    def GetSlip(self): return _imesh.iSkeletonBoneRagdollInfo_GetSlip(self)
    def SetBodyName(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetBodyName(self, *args)
    def GetBodyName(self): return _imesh.iSkeletonBoneRagdollInfo_GetBodyName(self)
    def SetBodyMass(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetBodyMass(self, *args)
    def GetBodyMass(self): return _imesh.iSkeletonBoneRagdollInfo_GetBodyMass(self)
    def SetBodyGravmode(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetBodyGravmode(self, *args)
    def GetBodyGravmode(self): return _imesh.iSkeletonBoneRagdollInfo_GetBodyGravmode(self)
    def SetJointName(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetJointName(self, *args)
    def GetJointName(self): return _imesh.iSkeletonBoneRagdollInfo_GetJointName(self)
    def SetJointMinRotContraints(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetJointMinRotContraints(self, *args)
    def GetJointMinRotContraints(self): return _imesh.iSkeletonBoneRagdollInfo_GetJointMinRotContraints(self)
    def SetJointMaxRotContraints(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetJointMaxRotContraints(self, *args)
    def GetJointMaxRotContraints(self): return _imesh.iSkeletonBoneRagdollInfo_GetJointMaxRotContraints(self)
    def SetJointMinTransContraints(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetJointMinTransContraints(self, *args)
    def GetJointMinTransContraints(self): return _imesh.iSkeletonBoneRagdollInfo_GetJointMinTransContraints(self)
    def SetJointMaxTransContraints(self, *args): return _imesh.iSkeletonBoneRagdollInfo_SetJointMaxTransContraints(self, *args)
    def GetJointMaxTransContraints(self): return _imesh.iSkeletonBoneRagdollInfo_GetJointMaxTransContraints(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonBoneRagdollInfo_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonBoneRagdollInfo
    __del__ = lambda self : None;
iSkeletonBoneRagdollInfo_swigregister = _imesh.iSkeletonBoneRagdollInfo_swigregister
iSkeletonBoneRagdollInfo_swigregister(iSkeletonBoneRagdollInfo)

def iSkeletonBoneRagdollInfo_scfGetVersion():
  return _imesh.iSkeletonBoneRagdollInfo_scfGetVersion()
iSkeletonBoneRagdollInfo_scfGetVersion = _imesh.iSkeletonBoneRagdollInfo_scfGetVersion

class iSkeletonBoneFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonBoneFactory_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonBoneFactory_SetName(self, *args)
    def GetTransform(self): return _imesh.iSkeletonBoneFactory_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iSkeletonBoneFactory_SetTransform(self, *args)
    def GetFullTransform(self): return _imesh.iSkeletonBoneFactory_GetFullTransform(self)
    def SetParent(self, *args): return _imesh.iSkeletonBoneFactory_SetParent(self, *args)
    def GetParent(self): return _imesh.iSkeletonBoneFactory_GetParent(self)
    def GetChildrenCount(self): return _imesh.iSkeletonBoneFactory_GetChildrenCount(self)
    def GetChild(self, *args): return _imesh.iSkeletonBoneFactory_GetChild(self, *args)
    def FindChild(self, *args): return _imesh.iSkeletonBoneFactory_FindChild(self, *args)
    def FindChildIndex(self, *args): return _imesh.iSkeletonBoneFactory_FindChildIndex(self, *args)
    def SetSkinBox(self, *args): return _imesh.iSkeletonBoneFactory_SetSkinBox(self, *args)
    def GetSkinBox(self): return _imesh.iSkeletonBoneFactory_GetSkinBox(self)
    def GetRagdollInfo(self): return _imesh.iSkeletonBoneFactory_GetRagdollInfo(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonBoneFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonBoneFactory
    __del__ = lambda self : None;
iSkeletonBoneFactory_swigregister = _imesh.iSkeletonBoneFactory_swigregister
iSkeletonBoneFactory_swigregister(iSkeletonBoneFactory)

def iSkeletonBoneFactory_scfGetVersion():
  return _imesh.iSkeletonBoneFactory_scfGetVersion()
iSkeletonBoneFactory_scfGetVersion = _imesh.iSkeletonBoneFactory_scfGetVersion

class iSkeletonSocketFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonSocketFactory_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonSocketFactory_SetName(self, *args)
    def GetTransform(self): return _imesh.iSkeletonSocketFactory_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iSkeletonSocketFactory_SetTransform(self, *args)
    def GetFullTransform(self): return _imesh.iSkeletonSocketFactory_GetFullTransform(self)
    def SetBone(self, *args): return _imesh.iSkeletonSocketFactory_SetBone(self, *args)
    def GetBone(self): return _imesh.iSkeletonSocketFactory_GetBone(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonSocketFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonSocketFactory
    __del__ = lambda self : None;
iSkeletonSocketFactory_swigregister = _imesh.iSkeletonSocketFactory_swigregister
iSkeletonSocketFactory_swigregister(iSkeletonSocketFactory)

def iSkeletonSocketFactory_scfGetVersion():
  return _imesh.iSkeletonSocketFactory_scfGetVersion()
iSkeletonSocketFactory_scfGetVersion = _imesh.iSkeletonSocketFactory_scfGetVersion

class iSkeletonFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonFactory_GetName(self)
    def SetName(self, *args): return _imesh.iSkeletonFactory_SetName(self, *args)
    def CreateBone(self, *args): return _imesh.iSkeletonFactory_CreateBone(self, *args)
    def CreateAnimation(self, *args): return _imesh.iSkeletonFactory_CreateAnimation(self, *args)
    def FindAnimation(self, *args): return _imesh.iSkeletonFactory_FindAnimation(self, *args)
    def GetAnimationsCount(self): return _imesh.iSkeletonFactory_GetAnimationsCount(self)
    def GetAnimation(self, *args): return _imesh.iSkeletonFactory_GetAnimation(self, *args)
    def FindBone(self, *args): return _imesh.iSkeletonFactory_FindBone(self, *args)
    def FindBoneIndex(self, *args): return _imesh.iSkeletonFactory_FindBoneIndex(self, *args)
    def GetBonesCount(self): return _imesh.iSkeletonFactory_GetBonesCount(self)
    def GetBone(self, *args): return _imesh.iSkeletonFactory_GetBone(self, *args)
    def GetGraveyard(self): return _imesh.iSkeletonFactory_GetGraveyard(self)
    def CreateSocket(self, *args): return _imesh.iSkeletonFactory_CreateSocket(self, *args)
    def FindSocket(self, *args): return _imesh.iSkeletonFactory_FindSocket(self, *args)
    def GetSocket(self, *args): return _imesh.iSkeletonFactory_GetSocket(self, *args)
    def RemoveSocket(self, *args): return _imesh.iSkeletonFactory_RemoveSocket(self, *args)
    def GetSocketsCount(self): return _imesh.iSkeletonFactory_GetSocketsCount(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonFactory
    __del__ = lambda self : None;
iSkeletonFactory_swigregister = _imesh.iSkeletonFactory_swigregister
iSkeletonFactory_swigregister(iSkeletonFactory)

def iSkeletonFactory_scfGetVersion():
  return _imesh.iSkeletonFactory_scfGetVersion()
iSkeletonFactory_scfGetVersion = _imesh.iSkeletonFactory_scfGetVersion

class iSkeletonGraveyard(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFactoriesCount(self): return _imesh.iSkeletonGraveyard_GetFactoriesCount(self)
    def CreateFactory(self, *args): return _imesh.iSkeletonGraveyard_CreateFactory(self, *args)
    def LoadFactory(self, *args): return _imesh.iSkeletonGraveyard_LoadFactory(self, *args)
    def FindFactory(self, *args): return _imesh.iSkeletonGraveyard_FindFactory(self, *args)
    def CreateSkeleton(self, *args): return _imesh.iSkeletonGraveyard_CreateSkeleton(self, *args)
    def SetManualUpdates(self, *args): return _imesh.iSkeletonGraveyard_SetManualUpdates(self, *args)
    def Update(self, *args): return _imesh.iSkeletonGraveyard_Update(self, *args)
    def AddSkeleton(self, *args): return _imesh.iSkeletonGraveyard_AddSkeleton(self, *args)
    def RemoveSkeleton(self, *args): return _imesh.iSkeletonGraveyard_RemoveSkeleton(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonGraveyard_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonGraveyard
    __del__ = lambda self : None;
iSkeletonGraveyard_swigregister = _imesh.iSkeletonGraveyard_swigregister
iSkeletonGraveyard_swigregister(iSkeletonGraveyard)

def iSkeletonGraveyard_scfGetVersion():
  return _imesh.iSkeletonGraveyard_scfGetVersion()
iSkeletonGraveyard_scfGetVersion = _imesh.iSkeletonGraveyard_scfGetVersion

class iGenMeshSkeletonControlState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetAnimatedVertices(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedVertices(self)
    def GetAnimatedVerticesCount(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedVerticesCount(self)
    def GetAnimatedFaceNormals(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedFaceNormals(self)
    def GetAnimatedFaceNormalsCount(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedFaceNormalsCount(self)
    def GetAnimatedVertNormals(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedVertNormals(self)
    def GetAnimatedVertNormalsCount(self): return _imesh.iGenMeshSkeletonControlState_GetAnimatedVertNormalsCount(self)
    def GetSkeleton(self): return _imesh.iGenMeshSkeletonControlState_GetSkeleton(self)
    scfGetVersion = staticmethod(_imesh.iGenMeshSkeletonControlState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iGenMeshSkeletonControlState
    __del__ = lambda self : None;
iGenMeshSkeletonControlState_swigregister = _imesh.iGenMeshSkeletonControlState_swigregister
iGenMeshSkeletonControlState_swigregister(iGenMeshSkeletonControlState)

def iGenMeshSkeletonControlState_scfGetVersion():
  return _imesh.iGenMeshSkeletonControlState_scfGetVersion()
iGenMeshSkeletonControlState_scfGetVersion = _imesh.iGenMeshSkeletonControlState_scfGetVersion

class csAnimatedMeshBoneInfluence(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    bone = _swig_property(_imesh.csAnimatedMeshBoneInfluence_bone_get, _imesh.csAnimatedMeshBoneInfluence_bone_set)
    influenceWeight = _swig_property(_imesh.csAnimatedMeshBoneInfluence_influenceWeight_get, _imesh.csAnimatedMeshBoneInfluence_influenceWeight_set)
    def __init__(self): 
        this = _imesh.new_csAnimatedMeshBoneInfluence()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csAnimatedMeshBoneInfluence
    __del__ = lambda self : None;
csAnimatedMeshBoneInfluence_swigregister = _imesh.csAnimatedMeshBoneInfluence_swigregister
csAnimatedMeshBoneInfluence_swigregister(csAnimatedMeshBoneInfluence)

class iAnimatedMeshSocketFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iAnimatedMeshSocketFactory_GetName(self)
    def GetTransform(self): return _imesh.iAnimatedMeshSocketFactory_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iAnimatedMeshSocketFactory_SetTransform(self, *args)
    def GetBone(self): return _imesh.iAnimatedMeshSocketFactory_GetBone(self)
    def GetFactory(self): return _imesh.iAnimatedMeshSocketFactory_GetFactory(self)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshSocketFactory
    __del__ = lambda self : None;
iAnimatedMeshSocketFactory_swigregister = _imesh.iAnimatedMeshSocketFactory_swigregister
iAnimatedMeshSocketFactory_swigregister(iAnimatedMeshSocketFactory)

class iAnimatedMeshSocket(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iAnimatedMeshSocket_GetName(self)
    def GetFactory(self): return _imesh.iAnimatedMeshSocket_GetFactory(self)
    def GetTransform(self): return _imesh.iAnimatedMeshSocket_GetTransform(self)
    def SetTransform(self, *args): return _imesh.iAnimatedMeshSocket_SetTransform(self, *args)
    def GetFullTransform(self): return _imesh.iAnimatedMeshSocket_GetFullTransform(self)
    def GetBone(self): return _imesh.iAnimatedMeshSocket_GetBone(self)
    def GetMesh(self): return _imesh.iAnimatedMeshSocket_GetMesh(self)
    def GetSceneNode(self): return _imesh.iAnimatedMeshSocket_GetSceneNode(self)
    def SetSceneNode(self, *args): return _imesh.iAnimatedMeshSocket_SetSceneNode(self, *args)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshSocket
    __del__ = lambda self : None;
iAnimatedMeshSocket_swigregister = _imesh.iAnimatedMeshSocket_swigregister
iAnimatedMeshSocket_swigregister(iAnimatedMeshSocket)

class iAnimatedMeshFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateSubMesh(self, *args): return _imesh.iAnimatedMeshFactory_CreateSubMesh(self, *args)
    def GetSubMesh(self, *args): return _imesh.iAnimatedMeshFactory_GetSubMesh(self, *args)
    def FindSubMesh(self, *args): return _imesh.iAnimatedMeshFactory_FindSubMesh(self, *args)
    def GetSubMeshCount(self): return _imesh.iAnimatedMeshFactory_GetSubMeshCount(self)
    def DeleteSubMesh(self, *args): return _imesh.iAnimatedMeshFactory_DeleteSubMesh(self, *args)
    def GetVertexCount(self): return _imesh.iAnimatedMeshFactory_GetVertexCount(self)
    def GetVertices(self): return _imesh.iAnimatedMeshFactory_GetVertices(self)
    def SetVertices(self, *args): return _imesh.iAnimatedMeshFactory_SetVertices(self, *args)
    def GetTexCoords(self): return _imesh.iAnimatedMeshFactory_GetTexCoords(self)
    def SetTexCoords(self, *args): return _imesh.iAnimatedMeshFactory_SetTexCoords(self, *args)
    def GetNormals(self): return _imesh.iAnimatedMeshFactory_GetNormals(self)
    def SetNormals(self, *args): return _imesh.iAnimatedMeshFactory_SetNormals(self, *args)
    def GetTangents(self): return _imesh.iAnimatedMeshFactory_GetTangents(self)
    def SetTangents(self, *args): return _imesh.iAnimatedMeshFactory_SetTangents(self, *args)
    def GetBinormals(self): return _imesh.iAnimatedMeshFactory_GetBinormals(self)
    def SetBinormals(self, *args): return _imesh.iAnimatedMeshFactory_SetBinormals(self, *args)
    def GetColors(self): return _imesh.iAnimatedMeshFactory_GetColors(self)
    def SetColors(self, *args): return _imesh.iAnimatedMeshFactory_SetColors(self, *args)
    def Invalidate(self): return _imesh.iAnimatedMeshFactory_Invalidate(self)
    def SetSkeletonFactory(self, *args): return _imesh.iAnimatedMeshFactory_SetSkeletonFactory(self, *args)
    def GetSkeletonFactory(self): return _imesh.iAnimatedMeshFactory_GetSkeletonFactory(self)
    def SetBoneInfluencesPerVertex(self, *args): return _imesh.iAnimatedMeshFactory_SetBoneInfluencesPerVertex(self, *args)
    def GetBoneInfluencesPerVertex(self): return _imesh.iAnimatedMeshFactory_GetBoneInfluencesPerVertex(self)
    def GetBoneInfluences(self): return _imesh.iAnimatedMeshFactory_GetBoneInfluences(self)
    def CreateMorphTarget(self, *args): return _imesh.iAnimatedMeshFactory_CreateMorphTarget(self, *args)
    def GetMorphTarget(self, *args): return _imesh.iAnimatedMeshFactory_GetMorphTarget(self, *args)
    def GetMorphTargetCount(self): return _imesh.iAnimatedMeshFactory_GetMorphTargetCount(self)
    def ClearMorphTargets(self): return _imesh.iAnimatedMeshFactory_ClearMorphTargets(self)
    def FindMorphTarget(self, *args): return _imesh.iAnimatedMeshFactory_FindMorphTarget(self, *args)
    def CreateSocket(self, *args): return _imesh.iAnimatedMeshFactory_CreateSocket(self, *args)
    def GetSocketCount(self): return _imesh.iAnimatedMeshFactory_GetSocketCount(self)
    def GetSocket(self, *args): return _imesh.iAnimatedMeshFactory_GetSocket(self, *args)
    def FindSocket(self, *args): return _imesh.iAnimatedMeshFactory_FindSocket(self, *args)
    scfGetVersion = staticmethod(_imesh.iAnimatedMeshFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshFactory
    __del__ = lambda self : None;
iAnimatedMeshFactory_swigregister = _imesh.iAnimatedMeshFactory_swigregister
iAnimatedMeshFactory_swigregister(iAnimatedMeshFactory)

def iAnimatedMeshFactory_scfGetVersion():
  return _imesh.iAnimatedMeshFactory_scfGetVersion()
iAnimatedMeshFactory_scfGetVersion = _imesh.iAnimatedMeshFactory_scfGetVersion

class iAnimatedMeshFactorySubMesh(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetIndices(self, *args): return _imesh.iAnimatedMeshFactorySubMesh_GetIndices(self, *args)
    def GetIndexSetCount(self): return _imesh.iAnimatedMeshFactorySubMesh_GetIndexSetCount(self)
    def GetBoneIndices(self, *args): return _imesh.iAnimatedMeshFactorySubMesh_GetBoneIndices(self, *args)
    def GetMaterial(self): return _imesh.iAnimatedMeshFactorySubMesh_GetMaterial(self)
    def SetMaterial(self, *args): return _imesh.iAnimatedMeshFactorySubMesh_SetMaterial(self, *args)
    def GetName(self): return _imesh.iAnimatedMeshFactorySubMesh_GetName(self)
    scfGetVersion = staticmethod(_imesh.iAnimatedMeshFactorySubMesh_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshFactorySubMesh
    __del__ = lambda self : None;
iAnimatedMeshFactorySubMesh_swigregister = _imesh.iAnimatedMeshFactorySubMesh_swigregister
iAnimatedMeshFactorySubMesh_swigregister(iAnimatedMeshFactorySubMesh)

def iAnimatedMeshFactorySubMesh_scfGetVersion():
  return _imesh.iAnimatedMeshFactorySubMesh_scfGetVersion()
iAnimatedMeshFactorySubMesh_scfGetVersion = _imesh.iAnimatedMeshFactorySubMesh_scfGetVersion

class iAnimatedMesh(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSkeleton(self, *args): return _imesh.iAnimatedMesh_SetSkeleton(self, *args)
    def GetSkeleton(self): return _imesh.iAnimatedMesh_GetSkeleton(self)
    def GetSubMesh(self, *args): return _imesh.iAnimatedMesh_GetSubMesh(self, *args)
    def GetSubMeshCount(self): return _imesh.iAnimatedMesh_GetSubMeshCount(self)
    def SetMorphTargetWeight(self, *args): return _imesh.iAnimatedMesh_SetMorphTargetWeight(self, *args)
    def GetMorphTargetWeight(self, *args): return _imesh.iAnimatedMesh_GetMorphTargetWeight(self, *args)
    def GetSocketCount(self): return _imesh.iAnimatedMesh_GetSocketCount(self)
    def GetSocket(self, *args): return _imesh.iAnimatedMesh_GetSocket(self, *args)
    scfGetVersion = staticmethod(_imesh.iAnimatedMesh_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iAnimatedMesh
    __del__ = lambda self : None;
iAnimatedMesh_swigregister = _imesh.iAnimatedMesh_swigregister
iAnimatedMesh_swigregister(iAnimatedMesh)

def iAnimatedMesh_scfGetVersion():
  return _imesh.iAnimatedMesh_scfGetVersion()
iAnimatedMesh_scfGetVersion = _imesh.iAnimatedMesh_scfGetVersion

class iAnimatedMeshSubMesh(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFactorySubMesh(self): return _imesh.iAnimatedMeshSubMesh_GetFactorySubMesh(self)
    def SetRendering(self, *args): return _imesh.iAnimatedMeshSubMesh_SetRendering(self, *args)
    def IsRendering(self): return _imesh.iAnimatedMeshSubMesh_IsRendering(self)
    def GetShaderVariableContext(self, *args): return _imesh.iAnimatedMeshSubMesh_GetShaderVariableContext(self, *args)
    def GetMaterial(self): return _imesh.iAnimatedMeshSubMesh_GetMaterial(self)
    def SetMaterial(self, *args): return _imesh.iAnimatedMeshSubMesh_SetMaterial(self, *args)
    scfGetVersion = staticmethod(_imesh.iAnimatedMeshSubMesh_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshSubMesh
    __del__ = lambda self : None;
iAnimatedMeshSubMesh_swigregister = _imesh.iAnimatedMeshSubMesh_swigregister
iAnimatedMeshSubMesh_swigregister(iAnimatedMeshSubMesh)

def iAnimatedMeshSubMesh_scfGetVersion():
  return _imesh.iAnimatedMeshSubMesh_scfGetVersion()
iAnimatedMeshSubMesh_scfGetVersion = _imesh.iAnimatedMeshSubMesh_scfGetVersion

class iAnimatedMeshMorphTarget(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetVertexOffsets(self, *args): return _imesh.iAnimatedMeshMorphTarget_SetVertexOffsets(self, *args)
    def GetVertexOffsets(self): return _imesh.iAnimatedMeshMorphTarget_GetVertexOffsets(self)
    def Invalidate(self): return _imesh.iAnimatedMeshMorphTarget_Invalidate(self)
    def GetName(self): return _imesh.iAnimatedMeshMorphTarget_GetName(self)
    scfGetVersion = staticmethod(_imesh.iAnimatedMeshMorphTarget_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iAnimatedMeshMorphTarget
    __del__ = lambda self : None;
iAnimatedMeshMorphTarget_swigregister = _imesh.iAnimatedMeshMorphTarget_swigregister
iAnimatedMeshMorphTarget_swigregister(iAnimatedMeshMorphTarget)

def iAnimatedMeshMorphTarget_scfGetVersion():
  return _imesh.iAnimatedMeshMorphTarget_scfGetVersion()
iAnimatedMeshMorphTarget_scfGetVersion = _imesh.iAnimatedMeshMorphTarget_scfGetVersion

class iSkeletonManager2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateSkeletonFactory(self, *args): return _imesh.iSkeletonManager2_CreateSkeletonFactory(self, *args)
    def FindSkeletonFactory(self, *args): return _imesh.iSkeletonManager2_FindSkeletonFactory(self, *args)
    def ClearSkeletonFactories(self): return _imesh.iSkeletonManager2_ClearSkeletonFactories(self)
    def CreateAnimPacketFactory(self, *args): return _imesh.iSkeletonManager2_CreateAnimPacketFactory(self, *args)
    def FindAnimPacketFactory(self, *args): return _imesh.iSkeletonManager2_FindAnimPacketFactory(self, *args)
    def ClearAnimPacketFactories(self): return _imesh.iSkeletonManager2_ClearAnimPacketFactories(self)
    def ClearAll(self): return _imesh.iSkeletonManager2_ClearAll(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonManager2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonManager2
    __del__ = lambda self : None;
iSkeletonManager2_swigregister = _imesh.iSkeletonManager2_swigregister
iSkeletonManager2_swigregister(iSkeletonManager2)
cvar = _imesh.cvar
InvalidBoneID = cvar.InvalidBoneID

def iSkeletonManager2_scfGetVersion():
  return _imesh.iSkeletonManager2_scfGetVersion()
iSkeletonManager2_scfGetVersion = _imesh.iSkeletonManager2_scfGetVersion

class iSkeletonFactory2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateBone(self, *args): return _imesh.iSkeletonFactory2_CreateBone(self, *args)
    def FindBone(self, *args): return _imesh.iSkeletonFactory2_FindBone(self, *args)
    def RemoveBone(self, *args): return _imesh.iSkeletonFactory2_RemoveBone(self, *args)
    def GetBoneParent(self, *args): return _imesh.iSkeletonFactory2_GetBoneParent(self, *args)
    def HasBone(self, *args): return _imesh.iSkeletonFactory2_HasBone(self, *args)
    def SetBoneName(self, *args): return _imesh.iSkeletonFactory2_SetBoneName(self, *args)
    def GetBoneName(self, *args): return _imesh.iSkeletonFactory2_GetBoneName(self, *args)
    def GetTopBoneID(self): return _imesh.iSkeletonFactory2_GetTopBoneID(self)
    def GetTransformBoneSpace(self, *args): return _imesh.iSkeletonFactory2_GetTransformBoneSpace(self, *args)
    def SetTransformBoneSpace(self, *args): return _imesh.iSkeletonFactory2_SetTransformBoneSpace(self, *args)
    def GetTransformAbsSpace(self, *args): return _imesh.iSkeletonFactory2_GetTransformAbsSpace(self, *args)
    def SetTransformAbsSpace(self, *args): return _imesh.iSkeletonFactory2_SetTransformAbsSpace(self, *args)
    def CreateSkeleton(self): return _imesh.iSkeletonFactory2_CreateSkeleton(self)
    def GetAnimationPacket(self): return _imesh.iSkeletonFactory2_GetAnimationPacket(self)
    def SetAnimationPacket(self, *args): return _imesh.iSkeletonFactory2_SetAnimationPacket(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonFactory2
    __del__ = lambda self : None;
iSkeletonFactory2_swigregister = _imesh.iSkeletonFactory2_swigregister
iSkeletonFactory2_swigregister(iSkeletonFactory2)

def iSkeletonFactory2_scfGetVersion():
  return _imesh.iSkeletonFactory2_scfGetVersion()
iSkeletonFactory2_scfGetVersion = _imesh.iSkeletonFactory2_scfGetVersion

class iSkeleton2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSceneNode(self): return _imesh.iSkeleton2_GetSceneNode(self)
    def GetTransformBoneSpace(self, *args): return _imesh.iSkeleton2_GetTransformBoneSpace(self, *args)
    def SetTransformBoneSpace(self, *args): return _imesh.iSkeleton2_SetTransformBoneSpace(self, *args)
    def GetTransformAbsSpace(self, *args): return _imesh.iSkeleton2_GetTransformAbsSpace(self, *args)
    def SetTransformAbsSpace(self, *args): return _imesh.iSkeleton2_SetTransformAbsSpace(self, *args)
    def GetTransformBindSpace(self, *args): return _imesh.iSkeleton2_GetTransformBindSpace(self, *args)
    def SetTransformBindSpace(self, *args): return _imesh.iSkeleton2_SetTransformBindSpace(self, *args)
    def GetStateAbsSpace(self): return _imesh.iSkeleton2_GetStateAbsSpace(self)
    def GetStateBoneSpace(self): return _imesh.iSkeleton2_GetStateBoneSpace(self)
    def GetStateBindSpace(self): return _imesh.iSkeleton2_GetStateBindSpace(self)
    def GetFactory(self): return _imesh.iSkeleton2_GetFactory(self)
    def GetAnimationPacket(self): return _imesh.iSkeleton2_GetAnimationPacket(self)
    def SetAnimationPacket(self, *args): return _imesh.iSkeleton2_SetAnimationPacket(self, *args)
    def RecreateSkeleton(self): return _imesh.iSkeleton2_RecreateSkeleton(self)
    def UpdateSkeleton(self, *args): return _imesh.iSkeleton2_UpdateSkeleton(self, *args)
    def GetSkeletonStateVersion(self): return _imesh.iSkeleton2_GetSkeletonStateVersion(self)
    scfGetVersion = staticmethod(_imesh.iSkeleton2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeleton2
    __del__ = lambda self : None;
iSkeleton2_swigregister = _imesh.iSkeleton2_swigregister
iSkeleton2_swigregister(iSkeleton2)

def iSkeleton2_scfGetVersion():
  return _imesh.iSkeleton2_scfGetVersion()
iSkeleton2_scfGetVersion = _imesh.iSkeleton2_scfGetVersion

class csSkeletalState2(core.csRefCount):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self): 
        this = _imesh.new_csSkeletalState2()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csSkeletalState2
    __del__ = lambda self : None;
    def GetVector(self, *args): return _imesh.csSkeletalState2_GetVector(self, *args)
    def GetQuaternion(self, *args): return _imesh.csSkeletalState2_GetQuaternion(self, *args)
    def IsBoneUsed(self, *args): return _imesh.csSkeletalState2_IsBoneUsed(self, *args)
    def SetBoneUsed(self, *args): return _imesh.csSkeletalState2_SetBoneUsed(self, *args)
    def GetBoneCount(self): return _imesh.csSkeletalState2_GetBoneCount(self)
    def Setup(self, *args): return _imesh.csSkeletalState2_Setup(self, *args)
csSkeletalState2_swigregister = _imesh.csSkeletalState2_swigregister
csSkeletalState2_swigregister(csSkeletalState2)

SYNC_NONE = _imesh.SYNC_NONE
SYNC_FIRSTFRAME = _imesh.SYNC_FIRSTFRAME
class iSkeletonAnimPacketFactory2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateInstance(self, *args)
    def CreateAnimation(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateAnimation(self, *args)
    def FindAnimation(self, *args): return _imesh.iSkeletonAnimPacketFactory2_FindAnimation(self, *args)
    def ClearAnimations(self): return _imesh.iSkeletonAnimPacketFactory2_ClearAnimations(self)
    def GetAnimation(self, *args): return _imesh.iSkeletonAnimPacketFactory2_GetAnimation(self, *args)
    def GetAnimationCount(self): return _imesh.iSkeletonAnimPacketFactory2_GetAnimationCount(self)
    def SetAnimationRoot(self, *args): return _imesh.iSkeletonAnimPacketFactory2_SetAnimationRoot(self, *args)
    def GetAnimationRoot(self): return _imesh.iSkeletonAnimPacketFactory2_GetAnimationRoot(self)
    def CreateAnimationNode(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateAnimationNode(self, *args)
    def CreateBlendNode(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateBlendNode(self, *args)
    def CreatePriorityNode(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreatePriorityNode(self, *args)
    def CreateRandomNode(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateRandomNode(self, *args)
    def CreateFSMNode(self, *args): return _imesh.iSkeletonAnimPacketFactory2_CreateFSMNode(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimPacketFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimPacketFactory2
    __del__ = lambda self : None;
iSkeletonAnimPacketFactory2_swigregister = _imesh.iSkeletonAnimPacketFactory2_swigregister
iSkeletonAnimPacketFactory2_swigregister(iSkeletonAnimPacketFactory2)
InvalidChannelID = cvar.InvalidChannelID
InvalidKeyframeID = cvar.InvalidKeyframeID
InvalidStateID = cvar.InvalidStateID

def iSkeletonAnimPacketFactory2_scfGetVersion():
  return _imesh.iSkeletonAnimPacketFactory2_scfGetVersion()
iSkeletonAnimPacketFactory2_scfGetVersion = _imesh.iSkeletonAnimPacketFactory2_scfGetVersion

class iSkeletonAnimPacket2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFactory(self): return _imesh.iSkeletonAnimPacket2_GetFactory(self)
    def GetAnimationRoot(self): return _imesh.iSkeletonAnimPacket2_GetAnimationRoot(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimPacket2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimPacket2
    __del__ = lambda self : None;
iSkeletonAnimPacket2_swigregister = _imesh.iSkeletonAnimPacket2_swigregister
iSkeletonAnimPacket2_swigregister(iSkeletonAnimPacket2)

def iSkeletonAnimPacket2_scfGetVersion():
  return _imesh.iSkeletonAnimPacket2_scfGetVersion()
iSkeletonAnimPacket2_scfGetVersion = _imesh.iSkeletonAnimPacket2_scfGetVersion

class iSkeletonAnimation2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetName(self): return _imesh.iSkeletonAnimation2_GetName(self)
    def AddChannel(self, *args): return _imesh.iSkeletonAnimation2_AddChannel(self, *args)
    def FindChannel(self, *args): return _imesh.iSkeletonAnimation2_FindChannel(self, *args)
    def AddKeyFrame(self, *args): return _imesh.iSkeletonAnimation2_AddKeyFrame(self, *args)
    def GetKeyFrameCount(self, *args): return _imesh.iSkeletonAnimation2_GetKeyFrameCount(self, *args)
    def GetKeyFrame(self, *args): return _imesh.iSkeletonAnimation2_GetKeyFrame(self, *args)
    def GetTwoKeyFrames(self, *args): return _imesh.iSkeletonAnimation2_GetTwoKeyFrames(self, *args)
    def BlendState(self, *args): return _imesh.iSkeletonAnimation2_BlendState(self, *args)
    def GetDuration(self): return _imesh.iSkeletonAnimation2_GetDuration(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimation2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimation2
    __del__ = lambda self : None;
iSkeletonAnimation2_swigregister = _imesh.iSkeletonAnimation2_swigregister
iSkeletonAnimation2_swigregister(iSkeletonAnimation2)

def iSkeletonAnimation2_scfGetVersion():
  return _imesh.iSkeletonAnimation2_scfGetVersion()
iSkeletonAnimation2_scfGetVersion = _imesh.iSkeletonAnimation2_scfGetVersion

class iSkeletonAnimCallback2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AnimationFinished(self, *args): return _imesh.iSkeletonAnimCallback2_AnimationFinished(self, *args)
    def AnimationCycled(self, *args): return _imesh.iSkeletonAnimCallback2_AnimationCycled(self, *args)
    def PlayStateChanged(self, *args): return _imesh.iSkeletonAnimCallback2_PlayStateChanged(self, *args)
    def DurationChanged(self, *args): return _imesh.iSkeletonAnimCallback2_DurationChanged(self, *args)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimCallback2
    __del__ = lambda self : None;
iSkeletonAnimCallback2_swigregister = _imesh.iSkeletonAnimCallback2_swigregister
iSkeletonAnimCallback2_swigregister(iSkeletonAnimCallback2)

class iSkeletonAnimNodeFactory2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateInstance(self, *args): return _imesh.iSkeletonAnimNodeFactory2_CreateInstance(self, *args)
    def GetNodeName(self): return _imesh.iSkeletonAnimNodeFactory2_GetNodeName(self)
    def FindNode(self, *args): return _imesh.iSkeletonAnimNodeFactory2_FindNode(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimNodeFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimNodeFactory2
    __del__ = lambda self : None;
iSkeletonAnimNodeFactory2_swigregister = _imesh.iSkeletonAnimNodeFactory2_swigregister
iSkeletonAnimNodeFactory2_swigregister(iSkeletonAnimNodeFactory2)

def iSkeletonAnimNodeFactory2_scfGetVersion():
  return _imesh.iSkeletonAnimNodeFactory2_scfGetVersion()
iSkeletonAnimNodeFactory2_scfGetVersion = _imesh.iSkeletonAnimNodeFactory2_scfGetVersion

class iSkeletonAnimNode2(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Play(self): return _imesh.iSkeletonAnimNode2_Play(self)
    def Stop(self): return _imesh.iSkeletonAnimNode2_Stop(self)
    def SetPlaybackPosition(self, *args): return _imesh.iSkeletonAnimNode2_SetPlaybackPosition(self, *args)
    def GetPlaybackPosition(self): return _imesh.iSkeletonAnimNode2_GetPlaybackPosition(self)
    def GetDuration(self): return _imesh.iSkeletonAnimNode2_GetDuration(self)
    def SetPlaybackSpeed(self, *args): return _imesh.iSkeletonAnimNode2_SetPlaybackSpeed(self, *args)
    def GetPlaybackSpeed(self): return _imesh.iSkeletonAnimNode2_GetPlaybackSpeed(self)
    def BlendState(self, *args): return _imesh.iSkeletonAnimNode2_BlendState(self, *args)
    def TickAnimation(self, *args): return _imesh.iSkeletonAnimNode2_TickAnimation(self, *args)
    def IsActive(self): return _imesh.iSkeletonAnimNode2_IsActive(self)
    def GetFactory(self): return _imesh.iSkeletonAnimNode2_GetFactory(self)
    def FindNode(self, *args): return _imesh.iSkeletonAnimNode2_FindNode(self, *args)
    def AddAnimationCallback(self, *args): return _imesh.iSkeletonAnimNode2_AddAnimationCallback(self, *args)
    def RemoveAnimationCallback(self, *args): return _imesh.iSkeletonAnimNode2_RemoveAnimationCallback(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimNode2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimNode2
    __del__ = lambda self : None;
iSkeletonAnimNode2_swigregister = _imesh.iSkeletonAnimNode2_swigregister
iSkeletonAnimNode2_swigregister(iSkeletonAnimNode2)

def iSkeletonAnimNode2_scfGetVersion():
  return _imesh.iSkeletonAnimNode2_scfGetVersion()
iSkeletonAnimNode2_scfGetVersion = _imesh.iSkeletonAnimNode2_scfGetVersion

class iSkeletonAnimationNodeFactory2(iSkeletonAnimNodeFactory2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetAnimation(self, *args): return _imesh.iSkeletonAnimationNodeFactory2_SetAnimation(self, *args)
    def GetAnimation(self): return _imesh.iSkeletonAnimationNodeFactory2_GetAnimation(self)
    def SetCyclic(self, *args): return _imesh.iSkeletonAnimationNodeFactory2_SetCyclic(self, *args)
    def IsCyclic(self): return _imesh.iSkeletonAnimationNodeFactory2_IsCyclic(self)
    def SetPlaybackSpeed(self, *args): return _imesh.iSkeletonAnimationNodeFactory2_SetPlaybackSpeed(self, *args)
    def GetPlaybackSpeed(self): return _imesh.iSkeletonAnimationNodeFactory2_GetPlaybackSpeed(self)
    def SetAutomaticReset(self, *args): return _imesh.iSkeletonAnimationNodeFactory2_SetAutomaticReset(self, *args)
    def GetAutomaticReset(self): return _imesh.iSkeletonAnimationNodeFactory2_GetAutomaticReset(self)
    def SetAutomaticStop(self, *args): return _imesh.iSkeletonAnimationNodeFactory2_SetAutomaticStop(self, *args)
    def GetAutomaticStop(self): return _imesh.iSkeletonAnimationNodeFactory2_GetAutomaticStop(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimationNodeFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimationNodeFactory2
    __del__ = lambda self : None;
iSkeletonAnimationNodeFactory2_swigregister = _imesh.iSkeletonAnimationNodeFactory2_swigregister
iSkeletonAnimationNodeFactory2_swigregister(iSkeletonAnimationNodeFactory2)

def iSkeletonAnimationNodeFactory2_scfGetVersion():
  return _imesh.iSkeletonAnimationNodeFactory2_scfGetVersion()
iSkeletonAnimationNodeFactory2_scfGetVersion = _imesh.iSkeletonAnimationNodeFactory2_scfGetVersion

class iSkeletonAnimationNode2(iSkeletonAnimNode2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    scfGetVersion = staticmethod(_imesh.iSkeletonAnimationNode2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonAnimationNode2
    __del__ = lambda self : None;
iSkeletonAnimationNode2_swigregister = _imesh.iSkeletonAnimationNode2_swigregister
iSkeletonAnimationNode2_swigregister(iSkeletonAnimationNode2)

def iSkeletonAnimationNode2_scfGetVersion():
  return _imesh.iSkeletonAnimationNode2_scfGetVersion()
iSkeletonAnimationNode2_scfGetVersion = _imesh.iSkeletonAnimationNode2_scfGetVersion

class iSkeletonBlendNodeFactory2(iSkeletonAnimNodeFactory2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _imesh.iSkeletonBlendNodeFactory2_AddNode(self, *args)
    def SetNodeWeight(self, *args): return _imesh.iSkeletonBlendNodeFactory2_SetNodeWeight(self, *args)
    def NormalizeWeights(self): return _imesh.iSkeletonBlendNodeFactory2_NormalizeWeights(self)
    def GetNode(self, *args): return _imesh.iSkeletonBlendNodeFactory2_GetNode(self, *args)
    def GetNodeCount(self): return _imesh.iSkeletonBlendNodeFactory2_GetNodeCount(self)
    def ClearNodes(self): return _imesh.iSkeletonBlendNodeFactory2_ClearNodes(self)
    def SetSynchronizationMode(self, *args): return _imesh.iSkeletonBlendNodeFactory2_SetSynchronizationMode(self, *args)
    def GetSynchronizationMode(self): return _imesh.iSkeletonBlendNodeFactory2_GetSynchronizationMode(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonBlendNodeFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonBlendNodeFactory2
    __del__ = lambda self : None;
iSkeletonBlendNodeFactory2_swigregister = _imesh.iSkeletonBlendNodeFactory2_swigregister
iSkeletonBlendNodeFactory2_swigregister(iSkeletonBlendNodeFactory2)

def iSkeletonBlendNodeFactory2_scfGetVersion():
  return _imesh.iSkeletonBlendNodeFactory2_scfGetVersion()
iSkeletonBlendNodeFactory2_scfGetVersion = _imesh.iSkeletonBlendNodeFactory2_scfGetVersion

class iSkeletonBlendNode2(iSkeletonAnimNode2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetNodeWeight(self, *args): return _imesh.iSkeletonBlendNode2_SetNodeWeight(self, *args)
    def NormalizeWeights(self): return _imesh.iSkeletonBlendNode2_NormalizeWeights(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonBlendNode2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonBlendNode2
    __del__ = lambda self : None;
iSkeletonBlendNode2_swigregister = _imesh.iSkeletonBlendNode2_swigregister
iSkeletonBlendNode2_swigregister(iSkeletonBlendNode2)

def iSkeletonBlendNode2_scfGetVersion():
  return _imesh.iSkeletonBlendNode2_scfGetVersion()
iSkeletonBlendNode2_scfGetVersion = _imesh.iSkeletonBlendNode2_scfGetVersion

class iSkeletonPriorityNodeFactory2(iSkeletonAnimNodeFactory2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _imesh.iSkeletonPriorityNodeFactory2_AddNode(self, *args)
    def SetNodePriority(self, *args): return _imesh.iSkeletonPriorityNodeFactory2_SetNodePriority(self, *args)
    def GetNode(self, *args): return _imesh.iSkeletonPriorityNodeFactory2_GetNode(self, *args)
    def GetNodeCount(self): return _imesh.iSkeletonPriorityNodeFactory2_GetNodeCount(self)
    def ClearNodes(self): return _imesh.iSkeletonPriorityNodeFactory2_ClearNodes(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonPriorityNodeFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonPriorityNodeFactory2
    __del__ = lambda self : None;
iSkeletonPriorityNodeFactory2_swigregister = _imesh.iSkeletonPriorityNodeFactory2_swigregister
iSkeletonPriorityNodeFactory2_swigregister(iSkeletonPriorityNodeFactory2)

def iSkeletonPriorityNodeFactory2_scfGetVersion():
  return _imesh.iSkeletonPriorityNodeFactory2_scfGetVersion()
iSkeletonPriorityNodeFactory2_scfGetVersion = _imesh.iSkeletonPriorityNodeFactory2_scfGetVersion

class iSkeletonPriorityNode2(iSkeletonAnimNode2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetNodePriority(self, *args): return _imesh.iSkeletonPriorityNode2_SetNodePriority(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonPriorityNode2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonPriorityNode2
    __del__ = lambda self : None;
iSkeletonPriorityNode2_swigregister = _imesh.iSkeletonPriorityNode2_swigregister
iSkeletonPriorityNode2_swigregister(iSkeletonPriorityNode2)

def iSkeletonPriorityNode2_scfGetVersion():
  return _imesh.iSkeletonPriorityNode2_scfGetVersion()
iSkeletonPriorityNode2_scfGetVersion = _imesh.iSkeletonPriorityNode2_scfGetVersion

class iSkeletonRandomNodeFactory2(iSkeletonAnimNodeFactory2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddNode(self, *args): return _imesh.iSkeletonRandomNodeFactory2_AddNode(self, *args)
    def SetNodeProbability(self, *args): return _imesh.iSkeletonRandomNodeFactory2_SetNodeProbability(self, *args)
    def SetAutomaticSwitch(self, *args): return _imesh.iSkeletonRandomNodeFactory2_SetAutomaticSwitch(self, *args)
    def GetNode(self, *args): return _imesh.iSkeletonRandomNodeFactory2_GetNode(self, *args)
    def GetNodeCount(self): return _imesh.iSkeletonRandomNodeFactory2_GetNodeCount(self)
    def ClearNodes(self): return _imesh.iSkeletonRandomNodeFactory2_ClearNodes(self)
    __swig_destroy__ = _imesh.delete_iSkeletonRandomNodeFactory2
    __del__ = lambda self : None;
iSkeletonRandomNodeFactory2_swigregister = _imesh.iSkeletonRandomNodeFactory2_swigregister
iSkeletonRandomNodeFactory2_swigregister(iSkeletonRandomNodeFactory2)

class iSkeletonRandomNode2(iSkeletonAnimNode2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Switch(self): return _imesh.iSkeletonRandomNode2_Switch(self)
    def GetCurrentNode(self): return _imesh.iSkeletonRandomNode2_GetCurrentNode(self)
    __swig_destroy__ = _imesh.delete_iSkeletonRandomNode2
    __del__ = lambda self : None;
iSkeletonRandomNode2_swigregister = _imesh.iSkeletonRandomNode2_swigregister
iSkeletonRandomNode2_swigregister(iSkeletonRandomNode2)

class iSkeletonFSMNodeFactory2(iSkeletonAnimNodeFactory2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddState(self): return _imesh.iSkeletonFSMNodeFactory2_AddState(self)
    def SetStateNode(self, *args): return _imesh.iSkeletonFSMNodeFactory2_SetStateNode(self, *args)
    def GetStateNode(self, *args): return _imesh.iSkeletonFSMNodeFactory2_GetStateNode(self, *args)
    def SetStateName(self, *args): return _imesh.iSkeletonFSMNodeFactory2_SetStateName(self, *args)
    def GetStateName(self, *args): return _imesh.iSkeletonFSMNodeFactory2_GetStateName(self, *args)
    def FindState(self, *args): return _imesh.iSkeletonFSMNodeFactory2_FindState(self, *args)
    def SetStartState(self, *args): return _imesh.iSkeletonFSMNodeFactory2_SetStartState(self, *args)
    def GetStartState(self): return _imesh.iSkeletonFSMNodeFactory2_GetStartState(self)
    def GetStateCount(self): return _imesh.iSkeletonFSMNodeFactory2_GetStateCount(self)
    def ClearStates(self): return _imesh.iSkeletonFSMNodeFactory2_ClearStates(self)
    def SetStateTransition(self, *args): return _imesh.iSkeletonFSMNodeFactory2_SetStateTransition(self, *args)
    def SetTransitionCrossfade(self, *args): return _imesh.iSkeletonFSMNodeFactory2_SetTransitionCrossfade(self, *args)
    scfGetVersion = staticmethod(_imesh.iSkeletonFSMNodeFactory2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonFSMNodeFactory2
    __del__ = lambda self : None;
iSkeletonFSMNodeFactory2_swigregister = _imesh.iSkeletonFSMNodeFactory2_swigregister
iSkeletonFSMNodeFactory2_swigregister(iSkeletonFSMNodeFactory2)

def iSkeletonFSMNodeFactory2_scfGetVersion():
  return _imesh.iSkeletonFSMNodeFactory2_scfGetVersion()
iSkeletonFSMNodeFactory2_scfGetVersion = _imesh.iSkeletonFSMNodeFactory2_scfGetVersion

class iSkeletonFSMNode2(iSkeletonAnimNode2):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SwitchToState(self, *args): return _imesh.iSkeletonFSMNode2_SwitchToState(self, *args)
    def GetCurrentState(self): return _imesh.iSkeletonFSMNode2_GetCurrentState(self)
    scfGetVersion = staticmethod(_imesh.iSkeletonFSMNode2_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSkeletonFSMNode2
    __del__ = lambda self : None;
iSkeletonFSMNode2_swigregister = _imesh.iSkeletonFSMNode2_swigregister
iSkeletonFSMNode2_swigregister(iSkeletonFSMNode2)

def iSkeletonFSMNode2_scfGetVersion():
  return _imesh.iSkeletonFSMNode2_scfGetVersion()
iSkeletonFSMNode2_scfGetVersion = _imesh.iSkeletonFSMNode2_scfGetVersion

class csSprite2DVertexArrayReadOnly(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetSize(self): return _imesh.csSprite2DVertexArrayReadOnly_GetSize(self)
    def Get(self, *args): return _imesh.csSprite2DVertexArrayReadOnly_Get(self, *args)
    def Top(self): return _imesh.csSprite2DVertexArrayReadOnly_Top(self)
    def Find(self, *args): return _imesh.csSprite2DVertexArrayReadOnly_Find(self, *args)
    def GetIndex(self, *args): return _imesh.csSprite2DVertexArrayReadOnly_GetIndex(self, *args)
    def IsEmpty(self): return _imesh.csSprite2DVertexArrayReadOnly_IsEmpty(self)
    def GetAll(self, *args): return _imesh.csSprite2DVertexArrayReadOnly_GetAll(self, *args)
    __swig_destroy__ = _imesh.delete_csSprite2DVertexArrayReadOnly
    __del__ = lambda self : None;
csSprite2DVertexArrayReadOnly_swigregister = _imesh.csSprite2DVertexArrayReadOnly_swigregister
csSprite2DVertexArrayReadOnly_swigregister(csSprite2DVertexArrayReadOnly)

class csSprite2DVertexArrayChangeElements(csSprite2DVertexArrayReadOnly):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Get(self, *args): return _imesh.csSprite2DVertexArrayChangeElements_Get(self, *args)
    def Top(self): return _imesh.csSprite2DVertexArrayChangeElements_Top(self)
    __swig_destroy__ = _imesh.delete_csSprite2DVertexArrayChangeElements
    __del__ = lambda self : None;
csSprite2DVertexArrayChangeElements_swigregister = _imesh.csSprite2DVertexArrayChangeElements_swigregister
csSprite2DVertexArrayChangeElements_swigregister(csSprite2DVertexArrayChangeElements)

class csSprite2DVertexArrayChangeAll(csSprite2DVertexArrayChangeElements):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSize(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_SetSize(self, *args)
    def GetExtend(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_GetExtend(self, *args)
    def Put(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_Put(self, *args)
    def Push(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_Push(self, *args)
    def PushSmart(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_PushSmart(self, *args)
    def Pop(self): return _imesh.csSprite2DVertexArrayChangeAll_Pop(self)
    def Insert(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_Insert(self, *args)
    def DeleteAll(self): return _imesh.csSprite2DVertexArrayChangeAll_DeleteAll(self)
    def Truncate(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_Truncate(self, *args)
    def Empty(self): return _imesh.csSprite2DVertexArrayChangeAll_Empty(self)
    def DeleteIndex(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_DeleteIndexFast(self, *args)
    def Delete(self, *args): return _imesh.csSprite2DVertexArrayChangeAll_Delete(self, *args)
    __swig_destroy__ = _imesh.delete_csSprite2DVertexArrayChangeAll
    __del__ = lambda self : None;
csSprite2DVertexArrayChangeAll_swigregister = _imesh.csSprite2DVertexArrayChangeAll_swigregister
csSprite2DVertexArrayChangeAll_swigregister(csSprite2DVertexArrayChangeAll)

class csSprite2DVertex(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    pos = _swig_property(_imesh.csSprite2DVertex_pos_get, _imesh.csSprite2DVertex_pos_set)
    color_init = _swig_property(_imesh.csSprite2DVertex_color_init_get, _imesh.csSprite2DVertex_color_init_set)
    color = _swig_property(_imesh.csSprite2DVertex_color_get, _imesh.csSprite2DVertex_color_set)
    u = _swig_property(_imesh.csSprite2DVertex_u_get, _imesh.csSprite2DVertex_u_set)
    v = _swig_property(_imesh.csSprite2DVertex_v_get, _imesh.csSprite2DVertex_v_set)
    def __eq__(self, *args): return _imesh.csSprite2DVertex___eq__(self, *args)
    def __init__(self): 
        this = _imesh.new_csSprite2DVertex()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csSprite2DVertex
    __del__ = lambda self : None;
csSprite2DVertex_swigregister = _imesh.csSprite2DVertex_swigregister
csSprite2DVertex_swigregister(csSprite2DVertex)

class iColoredVertices(csSprite2DVertexArrayChangeAll):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imesh.delete_iColoredVertices
    __del__ = lambda self : None;
iColoredVertices_swigregister = _imesh.iColoredVertices_swigregister
iColoredVertices_swigregister(iColoredVertices)

class iSprite2DUVAnimationFrame(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _imesh.iSprite2DUVAnimationFrame_SetName(self, *args)
    def GetName(self): return _imesh.iSprite2DUVAnimationFrame_GetName(self)
    def GetUVCoo(self, *args): return _imesh.iSprite2DUVAnimationFrame_GetUVCoo(self, *args)
    def GetUVCount(self): return _imesh.iSprite2DUVAnimationFrame_GetUVCount(self)
    def SetUV(self, *args): return _imesh.iSprite2DUVAnimationFrame_SetUV(self, *args)
    def SetFrameData(self, *args): return _imesh.iSprite2DUVAnimationFrame_SetFrameData(self, *args)
    def RemoveUV(self, *args): return _imesh.iSprite2DUVAnimationFrame_RemoveUV(self, *args)
    def GetDuration(self): return _imesh.iSprite2DUVAnimationFrame_GetDuration(self)
    def SetDuration(self, *args): return _imesh.iSprite2DUVAnimationFrame_SetDuration(self, *args)
    __swig_destroy__ = _imesh.delete_iSprite2DUVAnimationFrame
    __del__ = lambda self : None;
iSprite2DUVAnimationFrame_swigregister = _imesh.iSprite2DUVAnimationFrame_swigregister
iSprite2DUVAnimationFrame_swigregister(iSprite2DUVAnimationFrame)

class iSprite2DUVAnimation(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _imesh.iSprite2DUVAnimation_SetName(self, *args)
    def GetName(self): return _imesh.iSprite2DUVAnimation_GetName(self)
    def GetFrameCount(self): return _imesh.iSprite2DUVAnimation_GetFrameCount(self)
    def GetFrame(self, *args): return _imesh.iSprite2DUVAnimation_GetFrame(self, *args)
    def CreateFrame(self, *args): return _imesh.iSprite2DUVAnimation_CreateFrame(self, *args)
    def MoveFrame(self, *args): return _imesh.iSprite2DUVAnimation_MoveFrame(self, *args)
    def RemoveFrame(self, *args): return _imesh.iSprite2DUVAnimation_RemoveFrame(self, *args)
    __swig_destroy__ = _imesh.delete_iSprite2DUVAnimation
    __del__ = lambda self : None;
iSprite2DUVAnimation_swigregister = _imesh.iSprite2DUVAnimation_swigregister
iSprite2DUVAnimation_swigregister(iSprite2DUVAnimation)

class iSprite2DFactoryState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetLighting(self, *args): return _imesh.iSprite2DFactoryState_SetLighting(self, *args)
    def HasLighting(self): return _imesh.iSprite2DFactoryState_HasLighting(self)
    def GetUVAnimationCount(self): return _imesh.iSprite2DFactoryState_GetUVAnimationCount(self)
    def CreateUVAnimation(self): return _imesh.iSprite2DFactoryState_CreateUVAnimation(self)
    def RemoveUVAnimation(self, *args): return _imesh.iSprite2DFactoryState_RemoveUVAnimation(self, *args)
    def GetUVAnimation(self, *args): return _imesh.iSprite2DFactoryState_GetUVAnimation(self, *args)
    __swig_destroy__ = _imesh.delete_iSprite2DFactoryState
    __del__ = lambda self : None;
iSprite2DFactoryState_swigregister = _imesh.iSprite2DFactoryState_swigregister
iSprite2DFactoryState_swigregister(iSprite2DFactoryState)

class iSprite2DState(iSprite2DFactoryState):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateRegularVertices(self, *args): return _imesh.iSprite2DState_CreateRegularVertices(self, *args)
    def SetUVAnimation(self, *args): return _imesh.iSprite2DState_SetUVAnimation(self, *args)
    def GetUVAnimation(self, *args): return _imesh.iSprite2DState_GetUVAnimation(self, *args)
    def StopUVAnimation(self, *args): return _imesh.iSprite2DState_StopUVAnimation(self, *args)
    def PlayUVAnimation(self, *args): return _imesh.iSprite2DState_PlayUVAnimation(self, *args)
    def GetVertexByIndex(self, *args): return _imesh.iSprite2DState_GetVertexByIndex(self, *args)
    def GetVertexCount(self): return _imesh.iSprite2DState_GetVertexCount(self)
    scfGetVersion = staticmethod(_imesh.iSprite2DState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSprite2DState
    __del__ = lambda self : None;
iSprite2DState_swigregister = _imesh.iSprite2DState_swigregister
iSprite2DState_swigregister(iSprite2DState)

def iSprite2DState_scfGetVersion():
  return _imesh.iSprite2DState_scfGetVersion()
iSprite2DState_scfGetVersion = _imesh.iSprite2DState_scfGetVersion

CS_SPR_LIGHTING_HQ = _imesh.CS_SPR_LIGHTING_HQ
CS_SPR_LIGHTING_LQ = _imesh.CS_SPR_LIGHTING_LQ
CS_SPR_LIGHTING_FAST = _imesh.CS_SPR_LIGHTING_FAST
CS_SPR_LIGHTING_RANDOM = _imesh.CS_SPR_LIGHTING_RANDOM
CS_SPR_LIGHT_GLOBAL = _imesh.CS_SPR_LIGHT_GLOBAL
CS_SPR_LIGHT_TEMPLATE = _imesh.CS_SPR_LIGHT_TEMPLATE
CS_SPR_LIGHT_LOCAL = _imesh.CS_SPR_LIGHT_LOCAL
CS_SPR_LOD_GLOBAL = _imesh.CS_SPR_LOD_GLOBAL
CS_SPR_LOD_TEMPLATE = _imesh.CS_SPR_LOD_TEMPLATE
CS_SPR_LOD_LOCAL = _imesh.CS_SPR_LOD_LOCAL
class iSpriteFrame(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _imesh.iSpriteFrame_SetName(self, *args)
    def GetName(self): return _imesh.iSpriteFrame_GetName(self)
    def GetAnmIndex(self): return _imesh.iSpriteFrame_GetAnmIndex(self)
    def GetTexIndex(self): return _imesh.iSpriteFrame_GetTexIndex(self)
    __swig_destroy__ = _imesh.delete_iSpriteFrame
    __del__ = lambda self : None;
iSpriteFrame_swigregister = _imesh.iSpriteFrame_swigregister
iSpriteFrame_swigregister(iSpriteFrame)

class iSpriteAction(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _imesh.iSpriteAction_SetName(self, *args)
    def GetName(self): return _imesh.iSpriteAction_GetName(self)
    def GetFrameCount(self): return _imesh.iSpriteAction_GetFrameCount(self)
    def GetFrame(self, *args): return _imesh.iSpriteAction_GetFrame(self, *args)
    def GetNextFrame(self, *args): return _imesh.iSpriteAction_GetNextFrame(self, *args)
    def GetFrameDelay(self, *args): return _imesh.iSpriteAction_GetFrameDelay(self, *args)
    def GetFrameDisplacement(self, *args): return _imesh.iSpriteAction_GetFrameDisplacement(self, *args)
    def AddFrame(self, *args): return _imesh.iSpriteAction_AddFrame(self, *args)
    __swig_destroy__ = _imesh.delete_iSpriteAction
    __del__ = lambda self : None;
iSpriteAction_swigregister = _imesh.iSpriteAction_swigregister
iSpriteAction_swigregister(iSpriteAction)

class iSpriteSocket(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetName(self, *args): return _imesh.iSpriteSocket_SetName(self, *args)
    def GetName(self): return _imesh.iSpriteSocket_GetName(self)
    def SetMeshWrapper(self, *args): return _imesh.iSpriteSocket_SetMeshWrapper(self, *args)
    def GetMeshWrapper(self): return _imesh.iSpriteSocket_GetMeshWrapper(self)
    def SetTriangleIndex(self, *args): return _imesh.iSpriteSocket_SetTriangleIndex(self, *args)
    def GetTriangleIndex(self): return _imesh.iSpriteSocket_GetTriangleIndex(self)
    __swig_destroy__ = _imesh.delete_iSpriteSocket
    __del__ = lambda self : None;
iSpriteSocket_swigregister = _imesh.iSpriteSocket_swigregister
iSpriteSocket_swigregister(iSpriteSocket)

class iSprite3DFactoryState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddVertices(self, *args): return _imesh.iSprite3DFactoryState_AddVertices(self, *args)
    def GetVertexCount(self): return _imesh.iSprite3DFactoryState_GetVertexCount(self)
    def GetVertex(self, *args): return _imesh.iSprite3DFactoryState_GetVertex(self, *args)
    def SetVertex(self, *args): return _imesh.iSprite3DFactoryState_SetVertex(self, *args)
    def GetVertices(self, *args): return _imesh.iSprite3DFactoryState_GetVertices(self, *args)
    def SetVertices(self, *args): return _imesh.iSprite3DFactoryState_SetVertices(self, *args)
    def GetTexel(self, *args): return _imesh.iSprite3DFactoryState_GetTexel(self, *args)
    def SetTexel(self, *args): return _imesh.iSprite3DFactoryState_SetTexel(self, *args)
    def GetTexels(self, *args): return _imesh.iSprite3DFactoryState_GetTexels(self, *args)
    def SetTexels(self, *args): return _imesh.iSprite3DFactoryState_SetTexels(self, *args)
    def GetNormal(self, *args): return _imesh.iSprite3DFactoryState_GetNormal(self, *args)
    def SetNormal(self, *args): return _imesh.iSprite3DFactoryState_SetNormal(self, *args)
    def GetNormals(self, *args): return _imesh.iSprite3DFactoryState_GetNormals(self, *args)
    def SetNormals(self, *args): return _imesh.iSprite3DFactoryState_SetNormals(self, *args)
    def AddTriangle(self, *args): return _imesh.iSprite3DFactoryState_AddTriangle(self, *args)
    def GetTriangle(self, *args): return _imesh.iSprite3DFactoryState_GetTriangle(self, *args)
    def GetTriangles(self): return _imesh.iSprite3DFactoryState_GetTriangles(self)
    def GetTriangleCount(self): return _imesh.iSprite3DFactoryState_GetTriangleCount(self)
    def SetTriangleCount(self, *args): return _imesh.iSprite3DFactoryState_SetTriangleCount(self, *args)
    def SetTriangles(self, *args): return _imesh.iSprite3DFactoryState_SetTriangles(self, *args)
    def AddFrame(self): return _imesh.iSprite3DFactoryState_AddFrame(self)
    def FindFrame(self, *args): return _imesh.iSprite3DFactoryState_FindFrame(self, *args)
    def GetFrameCount(self): return _imesh.iSprite3DFactoryState_GetFrameCount(self)
    def GetFrame(self, *args): return _imesh.iSprite3DFactoryState_GetFrame(self, *args)
    def AddAction(self): return _imesh.iSprite3DFactoryState_AddAction(self)
    def FindAction(self, *args): return _imesh.iSprite3DFactoryState_FindAction(self, *args)
    def GetFirstAction(self): return _imesh.iSprite3DFactoryState_GetFirstAction(self)
    def GetActionCount(self): return _imesh.iSprite3DFactoryState_GetActionCount(self)
    def GetAction(self, *args): return _imesh.iSprite3DFactoryState_GetAction(self, *args)
    def AddSocket(self): return _imesh.iSprite3DFactoryState_AddSocket(self)
    def FindSocket(self, *args): return _imesh.iSprite3DFactoryState_FindSocket(self, *args)
    def GetSocketCount(self): return _imesh.iSprite3DFactoryState_GetSocketCount(self)
    def GetSocket(self, *args): return _imesh.iSprite3DFactoryState_GetSocket(self, *args)
    def EnableTweening(self, *args): return _imesh.iSprite3DFactoryState_EnableTweening(self, *args)
    def IsTweeningEnabled(self): return _imesh.iSprite3DFactoryState_IsTweeningEnabled(self)
    def SetLightingQuality(self, *args): return _imesh.iSprite3DFactoryState_SetLightingQuality(self, *args)
    def GetLightingQuality(self): return _imesh.iSprite3DFactoryState_GetLightingQuality(self)
    def SetLightingQualityConfig(self, *args): return _imesh.iSprite3DFactoryState_SetLightingQualityConfig(self, *args)
    def GetLightingQualityConfig(self): return _imesh.iSprite3DFactoryState_GetLightingQualityConfig(self)
    def SetLodLevelConfig(self, *args): return _imesh.iSprite3DFactoryState_SetLodLevelConfig(self, *args)
    def GetLodLevelConfig(self): return _imesh.iSprite3DFactoryState_GetLodLevelConfig(self)
    def MergeNormals(self, *args): return _imesh.iSprite3DFactoryState_MergeNormals(self, *args)
    __swig_destroy__ = _imesh.delete_iSprite3DFactoryState
    __del__ = lambda self : None;
iSprite3DFactoryState_swigregister = _imesh.iSprite3DFactoryState_swigregister
iSprite3DFactoryState_swigregister(iSprite3DFactoryState)

class iSprite3DState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetMixMode(self, *args): return _imesh.iSprite3DState_SetMixMode(self, *args)
    def GetMixMode(self): return _imesh.iSprite3DState_GetMixMode(self)
    def SetLighting(self, *args): return _imesh.iSprite3DState_SetLighting(self, *args)
    def IsLighting(self): return _imesh.iSprite3DState_IsLighting(self)
    def SetFrame(self, *args): return _imesh.iSprite3DState_SetFrame(self, *args)
    def GetCurFrame(self): return _imesh.iSprite3DState_GetCurFrame(self)
    def GetFrameCount(self): return _imesh.iSprite3DState_GetFrameCount(self)
    def SetAction(self, *args): return _imesh.iSprite3DState_SetAction(self, *args)
    def SetReverseAction(self, *args): return _imesh.iSprite3DState_SetReverseAction(self, *args)
    def SetSingleStepAction(self, *args): return _imesh.iSprite3DState_SetSingleStepAction(self, *args)
    def SetOverrideAction(self, *args): return _imesh.iSprite3DState_SetOverrideAction(self, *args)
    def PropagateAction(self, *args): return _imesh.iSprite3DState_PropagateAction(self, *args)
    def GetCurAction(self): return _imesh.iSprite3DState_GetCurAction(self)
    def GetReverseAction(self): return _imesh.iSprite3DState_GetReverseAction(self)
    def EnableTweening(self, *args): return _imesh.iSprite3DState_EnableTweening(self, *args)
    def IsTweeningEnabled(self): return _imesh.iSprite3DState_IsTweeningEnabled(self)
    def UnsetTexture(self): return _imesh.iSprite3DState_UnsetTexture(self)
    def GetLightingQuality(self): return _imesh.iSprite3DState_GetLightingQuality(self)
    def SetLocalLightingQuality(self, *args): return _imesh.iSprite3DState_SetLocalLightingQuality(self, *args)
    def SetLightingQualityConfig(self, *args): return _imesh.iSprite3DState_SetLightingQualityConfig(self, *args)
    def GetLightingQualityConfig(self): return _imesh.iSprite3DState_GetLightingQualityConfig(self)
    def SetLodLevelConfig(self, *args): return _imesh.iSprite3DState_SetLodLevelConfig(self, *args)
    def GetLodLevelConfig(self): return _imesh.iSprite3DState_GetLodLevelConfig(self)
    def IsLodEnabled(self): return _imesh.iSprite3DState_IsLodEnabled(self)
    def FindSocket(self, *args): return _imesh.iSprite3DState_FindSocket(self, *args)
    scfGetVersion = staticmethod(_imesh.iSprite3DState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSprite3DState
    __del__ = lambda self : None;
iSprite3DState_swigregister = _imesh.iSprite3DState_swigregister
iSprite3DState_swigregister(iSprite3DState)

def iSprite3DState_scfGetVersion():
  return _imesh.iSprite3DState_scfGetVersion()
iSprite3DState_scfGetVersion = _imesh.iSprite3DState_scfGetVersion

class iSpriteCal3DSocket(iSpriteSocket):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetSubmeshIndex(self, *args): return _imesh.iSpriteCal3DSocket_SetSubmeshIndex(self, *args)
    def GetSubmeshIndex(self): return _imesh.iSpriteCal3DSocket_GetSubmeshIndex(self)
    def SetMeshIndex(self, *args): return _imesh.iSpriteCal3DSocket_SetMeshIndex(self, *args)
    def GetMeshIndex(self): return _imesh.iSpriteCal3DSocket_GetMeshIndex(self)
    def SetTransform(self, *args): return _imesh.iSpriteCal3DSocket_SetTransform(self, *args)
    def GetTransform(self): return _imesh.iSpriteCal3DSocket_GetTransform(self)
    def GetSecondaryCount(self): return _imesh.iSpriteCal3DSocket_GetSecondaryCount(self)
    def GetSecondaryMesh(self, *args): return _imesh.iSpriteCal3DSocket_GetSecondaryMesh(self, *args)
    def GetSecondaryTransform(self, *args): return _imesh.iSpriteCal3DSocket_GetSecondaryTransform(self, *args)
    def SetSecondaryTransform(self, *args): return _imesh.iSpriteCal3DSocket_SetSecondaryTransform(self, *args)
    def AttachSecondary(self, *args): return _imesh.iSpriteCal3DSocket_AttachSecondary(self, *args)
    def DetachSecondary(self, *args): return _imesh.iSpriteCal3DSocket_DetachSecondary(self, *args)
    def FindSecondary(self, *args): return _imesh.iSpriteCal3DSocket_FindSecondary(self, *args)
    __swig_destroy__ = _imesh.delete_iSpriteCal3DSocket
    __del__ = lambda self : None;
iSpriteCal3DSocket_swigregister = _imesh.iSpriteCal3DSocket_swigregister
iSpriteCal3DSocket_swigregister(iSpriteCal3DSocket)

class iSpriteCal3DFactoryState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Create(self, *args): return _imesh.iSpriteCal3DFactoryState_Create(self, *args)
    def ReportLastError(self): return _imesh.iSpriteCal3DFactoryState_ReportLastError(self)
    def SetLoadFlags(self, *args): return _imesh.iSpriteCal3DFactoryState_SetLoadFlags(self, *args)
    def SetBasePath(self, *args): return _imesh.iSpriteCal3DFactoryState_SetBasePath(self, *args)
    def LoadCoreSkeleton(self, *args): return _imesh.iSpriteCal3DFactoryState_LoadCoreSkeleton(self, *args)
    def RescaleFactory(self, *args): return _imesh.iSpriteCal3DFactoryState_RescaleFactory(self, *args)
    def LoadCoreAnimation(self, *args): return _imesh.iSpriteCal3DFactoryState_LoadCoreAnimation(self, *args)
    def LoadCoreMesh(self, *args): return _imesh.iSpriteCal3DFactoryState_LoadCoreMesh(self, *args)
    def LoadCoreMorphTarget(self, *args): return _imesh.iSpriteCal3DFactoryState_LoadCoreMorphTarget(self, *args)
    def AddMorphAnimation(self, *args): return _imesh.iSpriteCal3DFactoryState_AddMorphAnimation(self, *args)
    def AddMorphTarget(self, *args): return _imesh.iSpriteCal3DFactoryState_AddMorphTarget(self, *args)
    def AddCoreMaterial(self, *args): return _imesh.iSpriteCal3DFactoryState_AddCoreMaterial(self, *args)
    def CalculateAllBoneBoundingBoxes(self): return _imesh.iSpriteCal3DFactoryState_CalculateAllBoneBoundingBoxes(self)
    def BindMaterials(self): return _imesh.iSpriteCal3DFactoryState_BindMaterials(self)
    def GetMeshCount(self): return _imesh.iSpriteCal3DFactoryState_GetMeshCount(self)
    def GetMorphAnimationCount(self): return _imesh.iSpriteCal3DFactoryState_GetMorphAnimationCount(self)
    def GetMorphTargetCount(self, *args): return _imesh.iSpriteCal3DFactoryState_GetMorphTargetCount(self, *args)
    def GetMeshName(self, *args): return _imesh.iSpriteCal3DFactoryState_GetMeshName(self, *args)
    def FindMeshName(self, *args): return _imesh.iSpriteCal3DFactoryState_FindMeshName(self, *args)
    def GetDefaultMaterial(self, *args): return _imesh.iSpriteCal3DFactoryState_GetDefaultMaterial(self, *args)
    def GetMorphAnimationName(self, *args): return _imesh.iSpriteCal3DFactoryState_GetMorphAnimationName(self, *args)
    def FindMorphAnimationName(self, *args): return _imesh.iSpriteCal3DFactoryState_FindMorphAnimationName(self, *args)
    def IsMeshDefault(self, *args): return _imesh.iSpriteCal3DFactoryState_IsMeshDefault(self, *args)
    def AddSocket(self): return _imesh.iSpriteCal3DFactoryState_AddSocket(self)
    def FindSocket(self, *args): return _imesh.iSpriteCal3DFactoryState_FindSocket(self, *args)
    def GetSocketCount(self): return _imesh.iSpriteCal3DFactoryState_GetSocketCount(self)
    def GetSocket(self, *args): return _imesh.iSpriteCal3DFactoryState_GetSocket(self, *args)
    def GetCal3DCoreModel(self): return _imesh.iSpriteCal3DFactoryState_GetCal3DCoreModel(self)
    def RegisterAnimCallback(self, *args): return _imesh.iSpriteCal3DFactoryState_RegisterAnimCallback(self, *args)
    def RemoveAnimCallback(self, *args): return _imesh.iSpriteCal3DFactoryState_RemoveAnimCallback(self, *args)
    __swig_destroy__ = _imesh.delete_iSpriteCal3DFactoryState
    __del__ = lambda self : None;
iSpriteCal3DFactoryState_swigregister = _imesh.iSpriteCal3DFactoryState_swigregister
iSpriteCal3DFactoryState_swigregister(iSpriteCal3DFactoryState)

class iAnimTimeUpdateHandler(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def UpdatePosition(self, *args): return _imesh.iAnimTimeUpdateHandler_UpdatePosition(self, *args)
    __swig_destroy__ = _imesh.delete_iAnimTimeUpdateHandler
    __del__ = lambda self : None;
iAnimTimeUpdateHandler_swigregister = _imesh.iAnimTimeUpdateHandler_swigregister
iAnimTimeUpdateHandler_swigregister(iAnimTimeUpdateHandler)

class csSpriteCal3DActiveAnim(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    index = _swig_property(_imesh.csSpriteCal3DActiveAnim_index_get, _imesh.csSpriteCal3DActiveAnim_index_set)
    weight = _swig_property(_imesh.csSpriteCal3DActiveAnim_weight_get, _imesh.csSpriteCal3DActiveAnim_weight_set)
    def __init__(self): 
        this = _imesh.new_csSpriteCal3DActiveAnim()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csSpriteCal3DActiveAnim
    __del__ = lambda self : None;
csSpriteCal3DActiveAnim_swigregister = _imesh.csSpriteCal3DActiveAnim_swigregister
csSpriteCal3DActiveAnim_swigregister(csSpriteCal3DActiveAnim)

class iSpriteCal3DState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    C3D_ANIM_TYPE_NONE = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_NONE
    C3D_ANIM_TYPE_IDLE = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_IDLE
    C3D_ANIM_TYPE_TRAVEL = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_TRAVEL
    C3D_ANIM_TYPE_CYCLE = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_CYCLE
    C3D_ANIM_TYPE_STYLE_CYCLE = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_STYLE_CYCLE
    C3D_ANIM_TYPE_ACTION = _imesh.iSpriteCal3DState_C3D_ANIM_TYPE_ACTION
    def GetAnimCount(self): return _imesh.iSpriteCal3DState_GetAnimCount(self)
    def GetAnimName(self, *args): return _imesh.iSpriteCal3DState_GetAnimName(self, *args)
    def GetAnimType(self, *args): return _imesh.iSpriteCal3DState_GetAnimType(self, *args)
    def FindAnim(self, *args): return _imesh.iSpriteCal3DState_FindAnim(self, *args)
    def ClearAllAnims(self): return _imesh.iSpriteCal3DState_ClearAllAnims(self)
    def SetAnimCycle(self, *args): return _imesh.iSpriteCal3DState_SetAnimCycle(self, *args)
    def AddAnimCycle(self, *args): return _imesh.iSpriteCal3DState_AddAnimCycle(self, *args)
    def ClearAnimCycle(self, *args): return _imesh.iSpriteCal3DState_ClearAnimCycle(self, *args)
    def GetActiveAnimCount(self): return _imesh.iSpriteCal3DState_GetActiveAnimCount(self)
    def GetActiveAnims(self, *args): return _imesh.iSpriteCal3DState_GetActiveAnims(self, *args)
    def SetActiveAnims(self, *args): return _imesh.iSpriteCal3DState_SetActiveAnims(self, *args)
    def SetAnimAction(self, *args): return _imesh.iSpriteCal3DState_SetAnimAction(self, *args)
    def SetVelocity(self, *args): return _imesh.iSpriteCal3DState_SetVelocity(self, *args)
    def SetDefaultIdleAnim(self, *args): return _imesh.iSpriteCal3DState_SetDefaultIdleAnim(self, *args)
    def SetCyclicBlendFactor(self, *args): return _imesh.iSpriteCal3DState_SetCyclicBlendFactor(self, *args)
    def SetLOD(self, *args): return _imesh.iSpriteCal3DState_SetLOD(self, *args)
    def AttachCoreMesh(self, *args): return _imesh.iSpriteCal3DState_AttachCoreMesh(self, *args)
    def DetachCoreMesh(self, *args): return _imesh.iSpriteCal3DState_DetachCoreMesh(self, *args)
    def BlendMorphTarget(self, *args): return _imesh.iSpriteCal3DState_BlendMorphTarget(self, *args)
    def ClearMorphTarget(self, *args): return _imesh.iSpriteCal3DState_ClearMorphTarget(self, *args)
    def FindSocket(self, *args): return _imesh.iSpriteCal3DState_FindSocket(self, *args)
    def SetMaterial(self, *args): return _imesh.iSpriteCal3DState_SetMaterial(self, *args)
    def SetTimeFactor(self, *args): return _imesh.iSpriteCal3DState_SetTimeFactor(self, *args)
    def GetTimeFactor(self): return _imesh.iSpriteCal3DState_GetTimeFactor(self)
    def GetAnimationTime(self): return _imesh.iSpriteCal3DState_GetAnimationTime(self)
    def GetAnimationDuration(self): return _imesh.iSpriteCal3DState_GetAnimationDuration(self)
    def SetAnimationTime(self, *args): return _imesh.iSpriteCal3DState_SetAnimationTime(self, *args)
    def SetAnimTimeUpdateHandler(self, *args): return _imesh.iSpriteCal3DState_SetAnimTimeUpdateHandler(self, *args)
    def SetUserData(self, *args): return _imesh.iSpriteCal3DState_SetUserData(self, *args)
    def GetCoreMeshShaderVarContext(self, *args): return _imesh.iSpriteCal3DState_GetCoreMeshShaderVarContext(self, *args)
    def GetSkeleton(self): return _imesh.iSpriteCal3DState_GetSkeleton(self)
    def GetCal3DModel(self): return _imesh.iSpriteCal3DState_GetCal3DModel(self)
    scfGetVersion = staticmethod(_imesh.iSpriteCal3DState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iSpriteCal3DState
    __del__ = lambda self : None;
iSpriteCal3DState_swigregister = _imesh.iSpriteCal3DState_swigregister
iSpriteCal3DState_swigregister(iSpriteCal3DState)

def iSpriteCal3DState_scfGetVersion():
  return _imesh.iSpriteCal3DState_scfGetVersion()
iSpriteCal3DState_scfGetVersion = _imesh.iSpriteCal3DState_scfGetVersion

CS_MESH_STATICPOS = _imesh.CS_MESH_STATICPOS
CS_MESH_STATICSHAPE = _imesh.CS_MESH_STATICSHAPE
CS_FACTORY_STATICSHAPE = _imesh.CS_FACTORY_STATICSHAPE
class iMeshObjectDrawCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def BeforeDrawing(self, *args): return _imesh.iMeshObjectDrawCallback_BeforeDrawing(self, *args)
    __swig_destroy__ = _imesh.delete_iMeshObjectDrawCallback
    __del__ = lambda self : None;
iMeshObjectDrawCallback_swigregister = _imesh.iMeshObjectDrawCallback_swigregister
iMeshObjectDrawCallback_swigregister(iMeshObjectDrawCallback)

class iMeshObject(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFactory(self): return _imesh.iMeshObject_GetFactory(self)
    def GetFlags(self): return _imesh.iMeshObject_GetFlags(self)
    def Clone(self): return _imesh.iMeshObject_Clone(self)
    def GetRenderMeshes(self, *args): return _imesh.iMeshObject_GetRenderMeshes(self, *args)
    def SetVisibleCallback(self, *args): return _imesh.iMeshObject_SetVisibleCallback(self, *args)
    def GetVisibleCallback(self): return _imesh.iMeshObject_GetVisibleCallback(self)
    def NextFrame(self, *args): return _imesh.iMeshObject_NextFrame(self, *args)
    def HardTransform(self, *args): return _imesh.iMeshObject_HardTransform(self, *args)
    def SupportsHardTransform(self): return _imesh.iMeshObject_SupportsHardTransform(self)
    def HitBeamOutline(self, *args): return _imesh.iMeshObject_HitBeamOutline(self, *args)
    def HitBeamObject(self, *args): return _imesh.iMeshObject_HitBeamObject(self, *args)
    def SetMeshWrapper(self, *args): return _imesh.iMeshObject_SetMeshWrapper(self, *args)
    def GetMeshWrapper(self): return _imesh.iMeshObject_GetMeshWrapper(self)
    def GetObjectModel(self): return _imesh.iMeshObject_GetObjectModel(self)
    def SetColor(self, *args): return _imesh.iMeshObject_SetColor(self, *args)
    def GetColor(self, *args): return _imesh.iMeshObject_GetColor(self, *args)
    def SetMaterialWrapper(self, *args): return _imesh.iMeshObject_SetMaterialWrapper(self, *args)
    def GetMaterialWrapper(self): return _imesh.iMeshObject_GetMaterialWrapper(self)
    def SetMixMode(self, *args): return _imesh.iMeshObject_SetMixMode(self, *args)
    def GetMixMode(self): return _imesh.iMeshObject_GetMixMode(self)
    def InvalidateMaterialHandles(self): return _imesh.iMeshObject_InvalidateMaterialHandles(self)
    def PositionChild(self, *args): return _imesh.iMeshObject_PositionChild(self, *args)
    def BuildDecal(self, *args): return _imesh.iMeshObject_BuildDecal(self, *args)
    scfGetVersion = staticmethod(_imesh.iMeshObject_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iMeshObject
    __del__ = lambda self : None;
iMeshObject_swigregister = _imesh.iMeshObject_swigregister
iMeshObject_swigregister(iMeshObject)

def iMeshObject_scfGetVersion():
  return _imesh.iMeshObject_scfGetVersion()
iMeshObject_scfGetVersion = _imesh.iMeshObject_scfGetVersion

class iMeshObjectFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetFlags(self): return _imesh.iMeshObjectFactory_GetFlags(self)
    def NewInstance(self): return _imesh.iMeshObjectFactory_NewInstance(self)
    def Clone(self): return _imesh.iMeshObjectFactory_Clone(self)
    def HardTransform(self, *args): return _imesh.iMeshObjectFactory_HardTransform(self, *args)
    def SupportsHardTransform(self): return _imesh.iMeshObjectFactory_SupportsHardTransform(self)
    def SetMeshFactoryWrapper(self, *args): return _imesh.iMeshObjectFactory_SetMeshFactoryWrapper(self, *args)
    def GetMeshFactoryWrapper(self): return _imesh.iMeshObjectFactory_GetMeshFactoryWrapper(self)
    def GetMeshObjectType(self): return _imesh.iMeshObjectFactory_GetMeshObjectType(self)
    def GetObjectModel(self): return _imesh.iMeshObjectFactory_GetObjectModel(self)
    def SetMaterialWrapper(self, *args): return _imesh.iMeshObjectFactory_SetMaterialWrapper(self, *args)
    def GetMaterialWrapper(self): return _imesh.iMeshObjectFactory_GetMaterialWrapper(self)
    def SetMixMode(self, *args): return _imesh.iMeshObjectFactory_SetMixMode(self, *args)
    def GetMixMode(self): return _imesh.iMeshObjectFactory_GetMixMode(self)
    scfGetVersion = staticmethod(_imesh.iMeshObjectFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iMeshObjectFactory
    __del__ = lambda self : None;
iMeshObjectFactory_swigregister = _imesh.iMeshObjectFactory_swigregister
iMeshObjectFactory_swigregister(iMeshObjectFactory)

def iMeshObjectFactory_scfGetVersion():
  return _imesh.iMeshObjectFactory_scfGetVersion()
iMeshObjectFactory_scfGetVersion = _imesh.iMeshObjectFactory_scfGetVersion

class iMeshObjectType(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def NewFactory(self): return _imesh.iMeshObjectType_NewFactory(self)
    scfGetVersion = staticmethod(_imesh.iMeshObjectType_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iMeshObjectType
    __del__ = lambda self : None;
iMeshObjectType_swigregister = _imesh.iMeshObjectType_swigregister
iMeshObjectType_swigregister(iMeshObjectType)

def iMeshObjectType_scfGetVersion():
  return _imesh.iMeshObjectType_scfGetVersion()
iMeshObjectType_scfGetVersion = _imesh.iMeshObjectType_scfGetVersion

class csPolygonRange(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    start = _swig_property(_imesh.csPolygonRange_start_get, _imesh.csPolygonRange_start_set)
    end = _swig_property(_imesh.csPolygonRange_end_get, _imesh.csPolygonRange_end_set)
    def __init__(self, *args): 
        this = _imesh.new_csPolygonRange(*args)
        try: self.this.append(this)
        except: self.this = this
    def Set(self, *args): return _imesh.csPolygonRange_Set(self, *args)
    __swig_destroy__ = _imesh.delete_csPolygonRange
    __del__ = lambda self : None;
csPolygonRange_swigregister = _imesh.csPolygonRange_swigregister
csPolygonRange_swigregister(csPolygonRange)

CS_POLY_LIGHTING = _imesh.CS_POLY_LIGHTING
CS_POLY_COLLDET = _imesh.CS_POLY_COLLDET
CS_POLY_VISCULL = _imesh.CS_POLY_VISCULL
CS_POLYINDEX_LAST = _imesh.CS_POLYINDEX_LAST
CS_THING_NOCOMPRESS = _imesh.CS_THING_NOCOMPRESS
CS_THING_MOVE_NEVER = _imesh.CS_THING_MOVE_NEVER
CS_THING_MOVE_OCCASIONAL = _imesh.CS_THING_MOVE_OCCASIONAL
class iPolygonHandle(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetThingFactoryState(self): return _imesh.iPolygonHandle_GetThingFactoryState(self)
    def GetMeshObjectFactory(self): return _imesh.iPolygonHandle_GetMeshObjectFactory(self)
    def GetThingState(self): return _imesh.iPolygonHandle_GetThingState(self)
    def GetMeshObject(self): return _imesh.iPolygonHandle_GetMeshObject(self)
    def GetIndex(self): return _imesh.iPolygonHandle_GetIndex(self)
    __swig_destroy__ = _imesh.delete_iPolygonHandle
    __del__ = lambda self : None;
iPolygonHandle_swigregister = _imesh.iPolygonHandle_swigregister
iPolygonHandle_swigregister(iPolygonHandle)

class iThingFactoryState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CompressVertices(self): return _imesh.iThingFactoryState_CompressVertices(self)
    def GetPolygonCount(self): return _imesh.iThingFactoryState_GetPolygonCount(self)
    def RemovePolygon(self, *args): return _imesh.iThingFactoryState_RemovePolygon(self, *args)
    def RemovePolygons(self): return _imesh.iThingFactoryState_RemovePolygons(self)
    def FindPolygonByName(self, *args): return _imesh.iThingFactoryState_FindPolygonByName(self, *args)
    def AddEmptyPolygon(self): return _imesh.iThingFactoryState_AddEmptyPolygon(self)
    def AddTriangle(self, *args): return _imesh.iThingFactoryState_AddTriangle(self, *args)
    def AddQuad(self, *args): return _imesh.iThingFactoryState_AddQuad(self, *args)
    def AddPolygon(self, *args): return _imesh.iThingFactoryState_AddPolygon(self, *args)
    def AddOutsideBox(self, *args): return _imesh.iThingFactoryState_AddOutsideBox(self, *args)
    def AddInsideBox(self, *args): return _imesh.iThingFactoryState_AddInsideBox(self, *args)
    def SetPolygonName(self, *args): return _imesh.iThingFactoryState_SetPolygonName(self, *args)
    def GetPolygonName(self, *args): return _imesh.iThingFactoryState_GetPolygonName(self, *args)
    def CreatePolygonHandle(self, *args): return _imesh.iThingFactoryState_CreatePolygonHandle(self, *args)
    def SetPolygonMaterial(self, *args): return _imesh.iThingFactoryState_SetPolygonMaterial(self, *args)
    def GetPolygonMaterial(self, *args): return _imesh.iThingFactoryState_GetPolygonMaterial(self, *args)
    def AddPolygonVertex(self, *args): return _imesh.iThingFactoryState_AddPolygonVertex(self, *args)
    def SetPolygonVertexIndices(self, *args): return _imesh.iThingFactoryState_SetPolygonVertexIndices(self, *args)
    def GetPolygonVertexCount(self, *args): return _imesh.iThingFactoryState_GetPolygonVertexCount(self, *args)
    def GetPolygonVertex(self, *args): return _imesh.iThingFactoryState_GetPolygonVertex(self, *args)
    def GetPolygonVertexIndices(self, *args): return _imesh.iThingFactoryState_GetPolygonVertexIndices(self, *args)
    def SetPolygonTextureMapping(self, *args): return _imesh.iThingFactoryState_SetPolygonTextureMapping(self, *args)
    def GetPolygonTextureMapping(self, *args): return _imesh.iThingFactoryState_GetPolygonTextureMapping(self, *args)
    def SetPolygonTextureMappingEnabled(self, *args): return _imesh.iThingFactoryState_SetPolygonTextureMappingEnabled(self, *args)
    def IsPolygonTextureMappingEnabled(self, *args): return _imesh.iThingFactoryState_IsPolygonTextureMappingEnabled(self, *args)
    def SetPolygonFlags(self, *args): return _imesh.iThingFactoryState_SetPolygonFlags(self, *args)
    def ResetPolygonFlags(self, *args): return _imesh.iThingFactoryState_ResetPolygonFlags(self, *args)
    def GetPolygonFlags(self, *args): return _imesh.iThingFactoryState_GetPolygonFlags(self, *args)
    def GetPolygonObjectPlane(self, *args): return _imesh.iThingFactoryState_GetPolygonObjectPlane(self, *args)
    def IsPolygonTransparent(self, *args): return _imesh.iThingFactoryState_IsPolygonTransparent(self, *args)
    def PointOnPolygon(self, *args): return _imesh.iThingFactoryState_PointOnPolygon(self, *args)
    def GetVertexCount(self): return _imesh.iThingFactoryState_GetVertexCount(self)
    def GetVertex(self, *args): return _imesh.iThingFactoryState_GetVertex(self, *args)
    def GetVertices(self): return _imesh.iThingFactoryState_GetVertices(self)
    def CreateVertex(self, *args): return _imesh.iThingFactoryState_CreateVertex(self, *args)
    def SetVertex(self, *args): return _imesh.iThingFactoryState_SetVertex(self, *args)
    def DeleteVertex(self, *args): return _imesh.iThingFactoryState_DeleteVertex(self, *args)
    def DeleteVertices(self, *args): return _imesh.iThingFactoryState_DeleteVertices(self, *args)
    def SetSmoothingFlag(self, *args): return _imesh.iThingFactoryState_SetSmoothingFlag(self, *args)
    def GetSmoothingFlag(self): return _imesh.iThingFactoryState_GetSmoothingFlag(self)
    def GetNormals(self): return _imesh.iThingFactoryState_GetNormals(self)
    def GetCosinusFactor(self): return _imesh.iThingFactoryState_GetCosinusFactor(self)
    def SetCosinusFactor(self, *args): return _imesh.iThingFactoryState_SetCosinusFactor(self, *args)
    def AddPolygonRenderBuffer(self, *args): return _imesh.iThingFactoryState_AddPolygonRenderBuffer(self, *args)
    def GetLightmapLayout(self, *args): return _imesh.iThingFactoryState_GetLightmapLayout(self, *args)
    scfGetVersion = staticmethod(_imesh.iThingFactoryState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iThingFactoryState
    __del__ = lambda self : None;
iThingFactoryState_swigregister = _imesh.iThingFactoryState_swigregister
iThingFactoryState_swigregister(iThingFactoryState)

def iThingFactoryState_scfGetVersion():
  return _imesh.iThingFactoryState_scfGetVersion()
iThingFactoryState_scfGetVersion = _imesh.iThingFactoryState_scfGetVersion

class iThingState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVertexW(self, *args): return _imesh.iThingState_GetVertexW(self, *args)
    def GetVerticesW(self): return _imesh.iThingState_GetVerticesW(self)
    def GetMovingOption(self): return _imesh.iThingState_GetMovingOption(self)
    def SetMovingOption(self, *args): return _imesh.iThingState_SetMovingOption(self, *args)
    def Prepare(self): return _imesh.iThingState_Prepare(self)
    def Unprepare(self): return _imesh.iThingState_Unprepare(self)
    def ReplaceMaterial(self, *args): return _imesh.iThingState_ReplaceMaterial(self, *args)
    def ClearReplacedMaterials(self): return _imesh.iThingState_ClearReplacedMaterials(self)
    def SetMixMode(self, *args): return _imesh.iThingState_SetMixMode(self, *args)
    def GetMixMode(self): return _imesh.iThingState_GetMixMode(self)
    def CreatePolygonHandle(self, *args): return _imesh.iThingState_CreatePolygonHandle(self, *args)
    def GetPolygonWorldPlane(self, *args): return _imesh.iThingState_GetPolygonWorldPlane(self, *args)
    def GetPolygonLightmap(self, *args): return _imesh.iThingState_GetPolygonLightmap(self, *args)
    def GetPolygonPDLight(self, *args): return _imesh.iThingState_GetPolygonPDLight(self, *args)
    def GetReplacedMaterial(self, *args): return _imesh.iThingState_GetReplacedMaterial(self, *args)
    scfGetVersion = staticmethod(_imesh.iThingState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iThingState
    __del__ = lambda self : None;
iThingState_swigregister = _imesh.iThingState_swigregister
iThingState_swigregister(iThingState)

def iThingState_scfGetVersion():
  return _imesh.iThingState_scfGetVersion()
iThingState_scfGetVersion = _imesh.iThingState_scfGetVersion

class iThingEnvironment(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clear(self): return _imesh.iThingEnvironment_Clear(self)
    def GetLightmapCellSize(self): return _imesh.iThingEnvironment_GetLightmapCellSize(self)
    def SetLightmapCellSize(self, *args): return _imesh.iThingEnvironment_SetLightmapCellSize(self, *args)
    def GetDefaultLightmapCellSize(self): return _imesh.iThingEnvironment_GetDefaultLightmapCellSize(self)
    __swig_destroy__ = _imesh.delete_iThingEnvironment
    __del__ = lambda self : None;
iThingEnvironment_swigregister = _imesh.iThingEnvironment_swigregister
iThingEnvironment_swigregister(iThingEnvironment)

class csCharArrayArray(core.CustomAllocated):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _imesh.delete_csCharArrayArray
    __del__ = lambda self : None;
    def __init__(self, *args): 
        this = _imesh.new_csCharArrayArray(*args)
        try: self.this.append(this)
        except: self.this = this
    def GetSize(self): return _imesh.csCharArrayArray_GetSize(self)
    def Get(self, *args): return _imesh.csCharArrayArray_Get(self, *args)
    def Put(self, *args): return _imesh.csCharArrayArray_Put(self, *args)
    def Push(self, *args): return _imesh.csCharArrayArray_Push(self, *args)
    def Pop(self): return _imesh.csCharArrayArray_Pop(self)
    def Top(self, *args): return _imesh.csCharArrayArray_Top(self, *args)
    def Insert(self, *args): return _imesh.csCharArrayArray_Insert(self, *args)
    def Contains(self, *args): return _imesh.csCharArrayArray_Contains(self, *args)
    def DeleteAll(self): return _imesh.csCharArrayArray_DeleteAll(self)
    def Truncate(self, *args): return _imesh.csCharArrayArray_Truncate(self, *args)
    def Empty(self): return _imesh.csCharArrayArray_Empty(self)
    def IsEmpty(self): return _imesh.csCharArrayArray_IsEmpty(self)
    def SetMinimalCapacity(self, *args): return _imesh.csCharArrayArray_SetMinimalCapacity(self, *args)
    def DeleteIndex(self, *args): return _imesh.csCharArrayArray_DeleteIndex(self, *args)
    def DeleteIndexFast(self, *args): return _imesh.csCharArrayArray_DeleteIndexFast(self, *args)
    def DeleteRange(self, *args): return _imesh.csCharArrayArray_DeleteRange(self, *args)
    def __eq__(self, *args): return _imesh.csCharArrayArray___eq__(self, *args)
    def __ne__(self, *args): return _imesh.csCharArrayArray___ne__(self, *args)
    def GetAllocator(self): return _imesh.csCharArrayArray_GetAllocator(self)
csCharArrayArray_swigregister = _imesh.csCharArrayArray_swigregister
csCharArrayArray_swigregister(csCharArrayArray)

class iTerrainObjectState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetMaterialPalette(self, *args): return _imesh.iTerrainObjectState_SetMaterialPalette(self, *args)
    def GetMaterialPalette(self): return _imesh.iTerrainObjectState_GetMaterialPalette(self)
    def SetMaterialMap(self, *args): return _imesh.iTerrainObjectState_SetMaterialMap(self, *args)
    def SetMaterialAlphaMaps(self, *args): return _imesh.iTerrainObjectState_SetMaterialAlphaMaps(self, *args)
    def SetLODValue(self, *args): return _imesh.iTerrainObjectState_SetLODValue(self, *args)
    def GetLODValue(self, *args): return _imesh.iTerrainObjectState_GetLODValue(self, *args)
    def SaveState(self, *args): return _imesh.iTerrainObjectState_SaveState(self, *args)
    def RestoreState(self, *args): return _imesh.iTerrainObjectState_RestoreState(self, *args)
    def CollisionDetect(self, *args): return _imesh.iTerrainObjectState_CollisionDetect(self, *args)
    def SetStaticLighting(self, *args): return _imesh.iTerrainObjectState_SetStaticLighting(self, *args)
    def GetStaticLighting(self): return _imesh.iTerrainObjectState_GetStaticLighting(self)
    def SetCastShadows(self, *args): return _imesh.iTerrainObjectState_SetCastShadows(self, *args)
    def GetCastShadows(self): return _imesh.iTerrainObjectState_GetCastShadows(self)
    def SetMaterialMapFile(self, *args): return _imesh.iTerrainObjectState_SetMaterialMapFile(self, *args)
    def GetMaterialMapFile(self, *args): return _imesh.iTerrainObjectState_GetMaterialMapFile(self, *args)
    def SetTopNeighbor(self, *args): return _imesh.iTerrainObjectState_SetTopNeighbor(self, *args)
    def SetRightNeighbor(self, *args): return _imesh.iTerrainObjectState_SetRightNeighbor(self, *args)
    def SetLeftNeighbor(self, *args): return _imesh.iTerrainObjectState_SetLeftNeighbor(self, *args)
    def SetBottomNeighbor(self, *args): return _imesh.iTerrainObjectState_SetBottomNeighbor(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainObjectState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainObjectState
    __del__ = lambda self : None;
iTerrainObjectState_swigregister = _imesh.iTerrainObjectState_swigregister
iTerrainObjectState_swigregister(iTerrainObjectState)

def iTerrainObjectState_scfGetVersion():
  return _imesh.iTerrainObjectState_scfGetVersion()
iTerrainObjectState_scfGetVersion = _imesh.iTerrainObjectState_scfGetVersion

class iTerrainFactoryState(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetTerraFormer(self, *args): return _imesh.iTerrainFactoryState_SetTerraFormer(self, *args)
    def GetTerraFormer(self): return _imesh.iTerrainFactoryState_GetTerraFormer(self)
    def SetSamplerRegion(self, *args): return _imesh.iTerrainFactoryState_SetSamplerRegion(self, *args)
    def GetSamplerRegion(self): return _imesh.iTerrainFactoryState_GetSamplerRegion(self)
    def SaveState(self, *args): return _imesh.iTerrainFactoryState_SaveState(self, *args)
    def RestoreState(self, *args): return _imesh.iTerrainFactoryState_RestoreState(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainFactoryState_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainFactoryState
    __del__ = lambda self : None;
iTerrainFactoryState_swigregister = _imesh.iTerrainFactoryState_swigregister
iTerrainFactoryState_swigregister(iTerrainFactoryState)

def iTerrainFactoryState_scfGetVersion():
  return _imesh.iTerrainFactoryState_scfGetVersion()
iTerrainFactoryState_scfGetVersion = _imesh.iTerrainFactoryState_scfGetVersion

class csLockedHeightData(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_imesh.csLockedHeightData_data_get, _imesh.csLockedHeightData_data_set)
    pitch = _swig_property(_imesh.csLockedHeightData_pitch_get, _imesh.csLockedHeightData_pitch_set)
    def Get(self, *args): return _imesh.csLockedHeightData_Get(self, *args)
    def Set(self, *args): return _imesh.csLockedHeightData_Set(self, *args)
    def __init__(self): 
        this = _imesh.new_csLockedHeightData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csLockedHeightData
    __del__ = lambda self : None;
csLockedHeightData_swigregister = _imesh.csLockedHeightData_swigregister
csLockedHeightData_swigregister(csLockedHeightData)

class csLockedMaterialMap(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    data = _swig_property(_imesh.csLockedMaterialMap_data_get, _imesh.csLockedMaterialMap_data_set)
    pitch = _swig_property(_imesh.csLockedMaterialMap_pitch_get, _imesh.csLockedMaterialMap_pitch_set)
    def Get(self, *args): return _imesh.csLockedMaterialMap_Get(self, *args)
    def Set(self, *args): return _imesh.csLockedMaterialMap_Set(self, *args)
    def __init__(self): 
        this = _imesh.new_csLockedMaterialMap()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csLockedMaterialMap
    __del__ = lambda self : None;
csLockedMaterialMap_swigregister = _imesh.csLockedMaterialMap_swigregister
csLockedMaterialMap_swigregister(csLockedMaterialMap)

class iTerrainVector3Array(csgeom.csVector3ArrayChangeAll):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imesh.delete_iTerrainVector3Array
    __del__ = lambda self : None;
iTerrainVector3Array_swigregister = _imesh.iTerrainVector3Array_swigregister
iTerrainVector3Array_swigregister(iTerrainVector3Array)

class iTerrainCollisionPairArray(ivaria.csCollisionPairArrayChangeAll):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _imesh.delete_iTerrainCollisionPairArray
    __del__ = lambda self : None;
iTerrainCollisionPairArray_swigregister = _imesh.iTerrainCollisionPairArray_swigregister
iTerrainCollisionPairArray_swigregister(iTerrainCollisionPairArray)

class iTerrainCellCollisionProperties(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCollidable(self): return _imesh.iTerrainCellCollisionProperties_GetCollidable(self)
    def SetCollidable(self, *args): return _imesh.iTerrainCellCollisionProperties_SetCollidable(self, *args)
    def SetParameter(self, *args): return _imesh.iTerrainCellCollisionProperties_SetParameter(self, *args)
    def Clone(self): return _imesh.iTerrainCellCollisionProperties_Clone(self)
    def GetParameterCount(self): return _imesh.iTerrainCellCollisionProperties_GetParameterCount(self)
    def GetParameterName(self, *args): return _imesh.iTerrainCellCollisionProperties_GetParameterName(self, *args)
    def GetParameterValue(self, *args): return _imesh.iTerrainCellCollisionProperties_GetParameterValue(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCellCollisionProperties_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCellCollisionProperties
    __del__ = lambda self : None;
iTerrainCellCollisionProperties_swigregister = _imesh.iTerrainCellCollisionProperties_swigregister
iTerrainCellCollisionProperties_swigregister(iTerrainCellCollisionProperties)

def iTerrainCellCollisionProperties_scfGetVersion():
  return _imesh.iTerrainCellCollisionProperties_scfGetVersion()
iTerrainCellCollisionProperties_scfGetVersion = _imesh.iTerrainCellCollisionProperties_scfGetVersion

class iTerrainCellRenderProperties(ivideo.iShaderVariableContext):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetVisible(self): return _imesh.iTerrainCellRenderProperties_GetVisible(self)
    def SetVisible(self, *args): return _imesh.iTerrainCellRenderProperties_SetVisible(self, *args)
    def SetParameter(self, *args): return _imesh.iTerrainCellRenderProperties_SetParameter(self, *args)
    def Clone(self): return _imesh.iTerrainCellRenderProperties_Clone(self)
    def GetParameterCount(self): return _imesh.iTerrainCellRenderProperties_GetParameterCount(self)
    def GetParameterName(self, *args): return _imesh.iTerrainCellRenderProperties_GetParameterName(self, *args)
    def GetParameterValue(self, *args): return _imesh.iTerrainCellRenderProperties_GetParameterValue(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCellRenderProperties_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCellRenderProperties
    __del__ = lambda self : None;
iTerrainCellRenderProperties_swigregister = _imesh.iTerrainCellRenderProperties_swigregister
iTerrainCellRenderProperties_swigregister(iTerrainCellRenderProperties)

def iTerrainCellRenderProperties_scfGetVersion():
  return _imesh.iTerrainCellRenderProperties_scfGetVersion()
iTerrainCellRenderProperties_scfGetVersion = _imesh.iTerrainCellRenderProperties_scfGetVersion

class iTerrainCellFeederProperties(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetHeightmapSource(self, *args): return _imesh.iTerrainCellFeederProperties_SetHeightmapSource(self, *args)
    def SetMaterialMapSource(self, *args): return _imesh.iTerrainCellFeederProperties_SetMaterialMapSource(self, *args)
    def SetHeightOffset(self, *args): return _imesh.iTerrainCellFeederProperties_SetHeightOffset(self, *args)
    def AddAlphaMap(self, *args): return _imesh.iTerrainCellFeederProperties_AddAlphaMap(self, *args)
    def SetParameter(self, *args): return _imesh.iTerrainCellFeederProperties_SetParameter(self, *args)
    def Clone(self): return _imesh.iTerrainCellFeederProperties_Clone(self)
    def GetParameterCount(self): return _imesh.iTerrainCellFeederProperties_GetParameterCount(self)
    def GetParameterName(self, *args): return _imesh.iTerrainCellFeederProperties_GetParameterName(self, *args)
    def GetParameterValue(self, *args): return _imesh.iTerrainCellFeederProperties_GetParameterValue(self, *args)
    def GetAlphaMapCount(self): return _imesh.iTerrainCellFeederProperties_GetAlphaMapCount(self)
    def GetAlphaMapMaterial(self, *args): return _imesh.iTerrainCellFeederProperties_GetAlphaMapMaterial(self, *args)
    def GetAlphaMapSource(self, *args): return _imesh.iTerrainCellFeederProperties_GetAlphaMapSource(self, *args)
    def SetHeightmapSmooth(self, *args): return _imesh.iTerrainCellFeederProperties_SetHeightmapSmooth(self, *args)
    def GetHeightmapSmooth(self): return _imesh.iTerrainCellFeederProperties_GetHeightmapSmooth(self)
    scfGetVersion = staticmethod(_imesh.iTerrainCellFeederProperties_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCellFeederProperties
    __del__ = lambda self : None;
iTerrainCellFeederProperties_swigregister = _imesh.iTerrainCellFeederProperties_swigregister
iTerrainCellFeederProperties_swigregister(iTerrainCellFeederProperties)

def iTerrainCellFeederProperties_scfGetVersion():
  return _imesh.iTerrainCellFeederProperties_scfGetVersion()
iTerrainCellFeederProperties_scfGetVersion = _imesh.iTerrainCellFeederProperties_scfGetVersion

class iTerrainDataFeeder(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateProperties(self): return _imesh.iTerrainDataFeeder_CreateProperties(self)
    def PreLoad(self, *args): return _imesh.iTerrainDataFeeder_PreLoad(self, *args)
    def Load(self, *args): return _imesh.iTerrainDataFeeder_Load(self, *args)
    def SetParameter(self, *args): return _imesh.iTerrainDataFeeder_SetParameter(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainDataFeeder_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainDataFeeder
    __del__ = lambda self : None;
iTerrainDataFeeder_swigregister = _imesh.iTerrainDataFeeder_swigregister
iTerrainDataFeeder_swigregister(iTerrainDataFeeder)

def iTerrainDataFeeder_scfGetVersion():
  return _imesh.iTerrainDataFeeder_scfGetVersion()
iTerrainDataFeeder_scfGetVersion = _imesh.iTerrainDataFeeder_scfGetVersion

class csTerrainColliderCollideSegmentResult(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    hit = _swig_property(_imesh.csTerrainColliderCollideSegmentResult_hit_get, _imesh.csTerrainColliderCollideSegmentResult_hit_set)
    isect = _swig_property(_imesh.csTerrainColliderCollideSegmentResult_isect_get, _imesh.csTerrainColliderCollideSegmentResult_isect_set)
    a = _swig_property(_imesh.csTerrainColliderCollideSegmentResult_a_get, _imesh.csTerrainColliderCollideSegmentResult_a_set)
    b = _swig_property(_imesh.csTerrainColliderCollideSegmentResult_b_get, _imesh.csTerrainColliderCollideSegmentResult_b_set)
    c = _swig_property(_imesh.csTerrainColliderCollideSegmentResult_c_get, _imesh.csTerrainColliderCollideSegmentResult_c_set)
    def __init__(self): 
        this = _imesh.new_csTerrainColliderCollideSegmentResult()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csTerrainColliderCollideSegmentResult
    __del__ = lambda self : None;
csTerrainColliderCollideSegmentResult_swigregister = _imesh.csTerrainColliderCollideSegmentResult_swigregister
csTerrainColliderCollideSegmentResult_swigregister(csTerrainColliderCollideSegmentResult)

class iTerrainCollider(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateProperties(self): return _imesh.iTerrainCollider_CreateProperties(self)
    def CollideSegment(self, *args): return _imesh.iTerrainCollider_CollideSegment(self, *args)
    def CollideTriangles(self, *args): return _imesh.iTerrainCollider_CollideTriangles(self, *args)
    def Collide(self, *args): return _imesh.iTerrainCollider_Collide(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCollider_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCollider
    __del__ = lambda self : None;
iTerrainCollider_swigregister = _imesh.iTerrainCollider_swigregister
iTerrainCollider_swigregister(iTerrainCollider)

def iTerrainCollider_scfGetVersion():
  return _imesh.iTerrainCollider_scfGetVersion()
iTerrainCollider_scfGetVersion = _imesh.iTerrainCollider_scfGetVersion

class iTerrainRenderer(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateProperties(self): return _imesh.iTerrainRenderer_CreateProperties(self)
    def ConnectTerrain(self, *args): return _imesh.iTerrainRenderer_ConnectTerrain(self, *args)
    def DisconnectTerrain(self, *args): return _imesh.iTerrainRenderer_DisconnectTerrain(self, *args)
    def GetRenderMeshes(self, *args): return _imesh.iTerrainRenderer_GetRenderMeshes(self, *args)
    def OnMaterialPaletteUpdate(self, *args): return _imesh.iTerrainRenderer_OnMaterialPaletteUpdate(self, *args)
    def OnMaterialMaskUpdate(self, *args): return _imesh.iTerrainRenderer_OnMaterialMaskUpdate(self, *args)
    def OnAlphaMapUpdate(self, *args): return _imesh.iTerrainRenderer_OnAlphaMapUpdate(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainRenderer_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainRenderer
    __del__ = lambda self : None;
iTerrainRenderer_swigregister = _imesh.iTerrainRenderer_swigregister
iTerrainRenderer_swigregister(iTerrainRenderer)

def iTerrainRenderer_scfGetVersion():
  return _imesh.iTerrainRenderer_scfGetVersion()
iTerrainRenderer_scfGetVersion = _imesh.iTerrainRenderer_scfGetVersion

class iTerrainCellHeightDataCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def OnHeightUpdate(self, *args): return _imesh.iTerrainCellHeightDataCallback_OnHeightUpdate(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCellHeightDataCallback_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCellHeightDataCallback
    __del__ = lambda self : None;
iTerrainCellHeightDataCallback_swigregister = _imesh.iTerrainCellHeightDataCallback_swigregister
iTerrainCellHeightDataCallback_swigregister(iTerrainCellHeightDataCallback)

def iTerrainCellHeightDataCallback_scfGetVersion():
  return _imesh.iTerrainCellHeightDataCallback_scfGetVersion()
iTerrainCellHeightDataCallback_scfGetVersion = _imesh.iTerrainCellHeightDataCallback_scfGetVersion

class iTerrainCellLoadCallback(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def OnCellLoad(self, *args): return _imesh.iTerrainCellLoadCallback_OnCellLoad(self, *args)
    def OnCellPreLoad(self, *args): return _imesh.iTerrainCellLoadCallback_OnCellPreLoad(self, *args)
    def OnCellUnload(self, *args): return _imesh.iTerrainCellLoadCallback_OnCellUnload(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCellLoadCallback_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCellLoadCallback
    __del__ = lambda self : None;
iTerrainCellLoadCallback_swigregister = _imesh.iTerrainCellLoadCallback_swigregister
iTerrainCellLoadCallback_swigregister(iTerrainCellLoadCallback)

def iTerrainCellLoadCallback_scfGetVersion():
  return _imesh.iTerrainCellLoadCallback_scfGetVersion()
iTerrainCellLoadCallback_scfGetVersion = _imesh.iTerrainCellLoadCallback_scfGetVersion

class iTerrainSystem(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetCell(self, *args): return _imesh.iTerrainSystem_GetCell(self, *args)
    def GetCellCount(self): return _imesh.iTerrainSystem_GetCellCount(self)
    def GetMaterialPalette(self): return _imesh.iTerrainSystem_GetMaterialPalette(self)
    def SetMaterialPalette(self, *args): return _imesh.iTerrainSystem_SetMaterialPalette(self, *args)
    def CollideSegment(self, *args): return _imesh.iTerrainSystem_CollideSegment(self, *args)
    def CollideTriangles(self, *args): return _imesh.iTerrainSystem_CollideTriangles(self, *args)
    def Collide(self, *args): return _imesh.iTerrainSystem_Collide(self, *args)
    def GetVirtualViewDistance(self): return _imesh.iTerrainSystem_GetVirtualViewDistance(self)
    def SetVirtualViewDistance(self, *args): return _imesh.iTerrainSystem_SetVirtualViewDistance(self, *args)
    def GetAutoPreLoad(self): return _imesh.iTerrainSystem_GetAutoPreLoad(self)
    def SetAutoPreLoad(self, *args): return _imesh.iTerrainSystem_SetAutoPreLoad(self, *args)
    def PreLoadCells(self, *args): return _imesh.iTerrainSystem_PreLoadCells(self, *args)
    def GetHeight(self, *args): return _imesh.iTerrainSystem_GetHeight(self, *args)
    def GetTangent(self, *args): return _imesh.iTerrainSystem_GetTangent(self, *args)
    def GetBinormal(self, *args): return _imesh.iTerrainSystem_GetBinormal(self, *args)
    def GetNormal(self, *args): return _imesh.iTerrainSystem_GetNormal(self, *args)
    def GetMaxLoadedCells(self): return _imesh.iTerrainSystem_GetMaxLoadedCells(self)
    def SetMaxLoadedCells(self, *args): return _imesh.iTerrainSystem_SetMaxLoadedCells(self, *args)
    def UnloadOldCells(self): return _imesh.iTerrainSystem_UnloadOldCells(self)
    def AddCellLoadListener(self, *args): return _imesh.iTerrainSystem_AddCellLoadListener(self, *args)
    def RemoveCellLoadListener(self, *args): return _imesh.iTerrainSystem_RemoveCellLoadListener(self, *args)
    def AddCellHeightUpdateListener(self, *args): return _imesh.iTerrainSystem_AddCellHeightUpdateListener(self, *args)
    def RemoveCellHeightUpdateListener(self, *args): return _imesh.iTerrainSystem_RemoveCellHeightUpdateListener(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainSystem_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainSystem
    __del__ = lambda self : None;
iTerrainSystem_swigregister = _imesh.iTerrainSystem_swigregister
iTerrainSystem_swigregister(iTerrainSystem)

def iTerrainSystem_scfGetVersion():
  return _imesh.iTerrainSystem_scfGetVersion()
iTerrainSystem_scfGetVersion = _imesh.iTerrainSystem_scfGetVersion

class iTerrainCell(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    NotLoaded = _imesh.iTerrainCell_NotLoaded
    PreLoaded = _imesh.iTerrainCell_PreLoaded
    Loaded = _imesh.iTerrainCell_Loaded
    def GetLoadState(self): return _imesh.iTerrainCell_GetLoadState(self)
    def SetLoadState(self, *args): return _imesh.iTerrainCell_SetLoadState(self, *args)
    def GetTerrain(self): return _imesh.iTerrainCell_GetTerrain(self)
    def GetName(self): return _imesh.iTerrainCell_GetName(self)
    def GetRenderProperties(self): return _imesh.iTerrainCell_GetRenderProperties(self)
    def GetCollisionProperties(self): return _imesh.iTerrainCell_GetCollisionProperties(self)
    def GetFeederProperties(self): return _imesh.iTerrainCell_GetFeederProperties(self)
    def GetGridWidth(self): return _imesh.iTerrainCell_GetGridWidth(self)
    def GetGridHeight(self): return _imesh.iTerrainCell_GetGridHeight(self)
    def GetHeightData(self): return _imesh.iTerrainCell_GetHeightData(self)
    def LockHeightData(self, *args): return _imesh.iTerrainCell_LockHeightData(self, *args)
    def UnlockHeightData(self): return _imesh.iTerrainCell_UnlockHeightData(self)
    def GetPosition(self): return _imesh.iTerrainCell_GetPosition(self)
    def GetSize(self): return _imesh.iTerrainCell_GetSize(self)
    def GetMaterialMapWidth(self): return _imesh.iTerrainCell_GetMaterialMapWidth(self)
    def GetMaterialMapHeight(self): return _imesh.iTerrainCell_GetMaterialMapHeight(self)
    def GetMaterialPersistent(self): return _imesh.iTerrainCell_GetMaterialPersistent(self)
    def LockMaterialMap(self, *args): return _imesh.iTerrainCell_LockMaterialMap(self, *args)
    def UnlockMaterialMap(self): return _imesh.iTerrainCell_UnlockMaterialMap(self)
    def SetMaterialMask(self, *args): return _imesh.iTerrainCell_SetMaterialMask(self, *args)
    def SetAlphaMask(self, *args): return _imesh.iTerrainCell_SetAlphaMask(self, *args)
    def SetBaseMaterial(self, *args): return _imesh.iTerrainCell_SetBaseMaterial(self, *args)
    def GetBaseMaterial(self): return _imesh.iTerrainCell_GetBaseMaterial(self)
    def CollideSegment(self, *args): return _imesh.iTerrainCell_CollideSegment(self, *args)
    def CollideTriangles(self, *args): return _imesh.iTerrainCell_CollideTriangles(self, *args)
    def Collide(self, *args): return _imesh.iTerrainCell_Collide(self, *args)
    def GetHeight(self, *args): return _imesh.iTerrainCell_GetHeight(self, *args)
    def GetTangent(self, *args): return _imesh.iTerrainCell_GetTangent(self, *args)
    def GetBinormal(self, *args): return _imesh.iTerrainCell_GetBinormal(self, *args)
    def GetNormal(self, *args): return _imesh.iTerrainCell_GetNormal(self, *args)
    def GetRenderData(self): return _imesh.iTerrainCell_GetRenderData(self)
    def SetRenderData(self, *args): return _imesh.iTerrainCell_SetRenderData(self, *args)
    def GetCollisionData(self): return _imesh.iTerrainCell_GetCollisionData(self)
    def SetCollisionData(self, *args): return _imesh.iTerrainCell_SetCollisionData(self, *args)
    def GetFeederData(self): return _imesh.iTerrainCell_GetFeederData(self)
    def SetFeederData(self, *args): return _imesh.iTerrainCell_SetFeederData(self, *args)
    def SetName(self, *args): return _imesh.iTerrainCell_SetName(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainCell_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainCell
    __del__ = lambda self : None;
iTerrainCell_swigregister = _imesh.iTerrainCell_swigregister
iTerrainCell_swigregister(iTerrainCell)

def iTerrainCell_scfGetVersion():
  return _imesh.iTerrainCell_scfGetVersion()
iTerrainCell_scfGetVersion = _imesh.iTerrainCell_scfGetVersion

class iTerrainFactoryCell(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetRenderProperties(self): return _imesh.iTerrainFactoryCell_GetRenderProperties(self)
    def GetCollisionProperties(self): return _imesh.iTerrainFactoryCell_GetCollisionProperties(self)
    def GetFeederProperties(self): return _imesh.iTerrainFactoryCell_GetFeederProperties(self)
    def SetBaseMaterial(self, *args): return _imesh.iTerrainFactoryCell_SetBaseMaterial(self, *args)
    def GetName(self): return _imesh.iTerrainFactoryCell_GetName(self)
    def SetName(self, *args): return _imesh.iTerrainFactoryCell_SetName(self, *args)
    def GetGridWidth(self): return _imesh.iTerrainFactoryCell_GetGridWidth(self)
    def GetGridHeight(self): return _imesh.iTerrainFactoryCell_GetGridHeight(self)
    def GetPosition(self): return _imesh.iTerrainFactoryCell_GetPosition(self)
    def GetSize(self): return _imesh.iTerrainFactoryCell_GetSize(self)
    def GetMaterialMapWidth(self): return _imesh.iTerrainFactoryCell_GetMaterialMapWidth(self)
    def GetMaterialMapHeight(self): return _imesh.iTerrainFactoryCell_GetMaterialMapHeight(self)
    def GetBaseMaterial(self): return _imesh.iTerrainFactoryCell_GetBaseMaterial(self)
    def GetMaterialPersistent(self): return _imesh.iTerrainFactoryCell_GetMaterialPersistent(self)
    def SetGridWidth(self, *args): return _imesh.iTerrainFactoryCell_SetGridWidth(self, *args)
    def SetGridHeight(self, *args): return _imesh.iTerrainFactoryCell_SetGridHeight(self, *args)
    def SetPosition(self, *args): return _imesh.iTerrainFactoryCell_SetPosition(self, *args)
    def SetSize(self, *args): return _imesh.iTerrainFactoryCell_SetSize(self, *args)
    def SetMaterialMapWidth(self, *args): return _imesh.iTerrainFactoryCell_SetMaterialMapWidth(self, *args)
    def SetMaterialMapHeight(self, *args): return _imesh.iTerrainFactoryCell_SetMaterialMapHeight(self, *args)
    def SetMaterialPersistent(self, *args): return _imesh.iTerrainFactoryCell_SetMaterialPersistent(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainFactoryCell_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainFactoryCell
    __del__ = lambda self : None;
iTerrainFactoryCell_swigregister = _imesh.iTerrainFactoryCell_swigregister
iTerrainFactoryCell_swigregister(iTerrainFactoryCell)

def iTerrainFactoryCell_scfGetVersion():
  return _imesh.iTerrainFactoryCell_scfGetVersion()
iTerrainFactoryCell_scfGetVersion = _imesh.iTerrainFactoryCell_scfGetVersion

class iTerrainFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRenderer(self, *args): return _imesh.iTerrainFactory_SetRenderer(self, *args)
    def SetCollider(self, *args): return _imesh.iTerrainFactory_SetCollider(self, *args)
    def SetFeeder(self, *args): return _imesh.iTerrainFactory_SetFeeder(self, *args)
    def SetMaxLoadedCells(self, *args): return _imesh.iTerrainFactory_SetMaxLoadedCells(self, *args)
    def SetVirtualViewDistance(self, *args): return _imesh.iTerrainFactory_SetVirtualViewDistance(self, *args)
    def SetAutoPreLoad(self, *args): return _imesh.iTerrainFactory_SetAutoPreLoad(self, *args)
    def GetRenderer(self): return _imesh.iTerrainFactory_GetRenderer(self)
    def GetCollider(self): return _imesh.iTerrainFactory_GetCollider(self)
    def GetFeeder(self): return _imesh.iTerrainFactory_GetFeeder(self)
    def GetMaxLoadedCells(self): return _imesh.iTerrainFactory_GetMaxLoadedCells(self)
    def GetCellCount(self): return _imesh.iTerrainFactory_GetCellCount(self)
    def GetDefaultCell(self): return _imesh.iTerrainFactory_GetDefaultCell(self)
    def AddCell(self, *args): return _imesh.iTerrainFactory_AddCell(self, *args)
    def GetCell(self, *args): return _imesh.iTerrainFactory_GetCell(self, *args)
    scfGetVersion = staticmethod(_imesh.iTerrainFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iTerrainFactory
    __del__ = lambda self : None;
iTerrainFactory_swigregister = _imesh.iTerrainFactory_swigregister
iTerrainFactory_swigregister(iTerrainFactory)

def iTerrainFactory_scfGetVersion():
  return _imesh.iTerrainFactory_scfGetVersion()
iTerrainFactory_scfGetVersion = _imesh.iTerrainFactory_scfGetVersion

CS_PARTICLE_SORT_NONE = _imesh.CS_PARTICLE_SORT_NONE
CS_PARTICLE_SORT_DISTANCE = _imesh.CS_PARTICLE_SORT_DISTANCE
CS_PARTICLE_SORT_DOT = _imesh.CS_PARTICLE_SORT_DOT
CS_PARTICLE_CAMERAFACE = _imesh.CS_PARTICLE_CAMERAFACE
CS_PARTICLE_CAMERAFACE_APPROX = _imesh.CS_PARTICLE_CAMERAFACE_APPROX
CS_PARTICLE_ORIENT_COMMON = _imesh.CS_PARTICLE_ORIENT_COMMON
CS_PARTICLE_ORIENT_COMMON_APPROX = _imesh.CS_PARTICLE_ORIENT_COMMON_APPROX
CS_PARTICLE_ORIENT_VELOCITY = _imesh.CS_PARTICLE_ORIENT_VELOCITY
CS_PARTICLE_ORIENT_SELF = _imesh.CS_PARTICLE_ORIENT_SELF
CS_PARTICLE_ORIENT_SELF_FORWARD = _imesh.CS_PARTICLE_ORIENT_SELF_FORWARD
CS_PARTICLE_ROTATE_NONE = _imesh.CS_PARTICLE_ROTATE_NONE
CS_PARTICLE_ROTATE_TEXCOORD = _imesh.CS_PARTICLE_ROTATE_TEXCOORD
CS_PARTICLE_ROTATE_VERTICES = _imesh.CS_PARTICLE_ROTATE_VERTICES
CS_PARTICLE_INTEGRATE_NONE = _imesh.CS_PARTICLE_INTEGRATE_NONE
CS_PARTICLE_INTEGRATE_LINEAR = _imesh.CS_PARTICLE_INTEGRATE_LINEAR
CS_PARTICLE_INTEGRATE_BOTH = _imesh.CS_PARTICLE_INTEGRATE_BOTH
CS_PARTICLE_LOCAL_MODE = _imesh.CS_PARTICLE_LOCAL_MODE
CS_PARTICLE_LOCAL_EMITTER = _imesh.CS_PARTICLE_LOCAL_EMITTER
CS_PARTICLE_WORLD_MODE = _imesh.CS_PARTICLE_WORLD_MODE
class csParticle(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    position = _swig_property(_imesh.csParticle_position_get, _imesh.csParticle_position_set)
    mass = _swig_property(_imesh.csParticle_mass_get, _imesh.csParticle_mass_set)
    orientation = _swig_property(_imesh.csParticle_orientation_get, _imesh.csParticle_orientation_set)
    linearVelocity = _swig_property(_imesh.csParticle_linearVelocity_get, _imesh.csParticle_linearVelocity_set)
    timeToLive = _swig_property(_imesh.csParticle_timeToLive_get, _imesh.csParticle_timeToLive_set)
    angularVelocity = _swig_property(_imesh.csParticle_angularVelocity_get, _imesh.csParticle_angularVelocity_set)
    pad = _swig_property(_imesh.csParticle_pad_get, _imesh.csParticle_pad_set)
    def __init__(self): 
        this = _imesh.new_csParticle()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csParticle
    __del__ = lambda self : None;
csParticle_swigregister = _imesh.csParticle_swigregister
csParticle_swigregister(csParticle)

class csParticleAux(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    color = _swig_property(_imesh.csParticleAux_color_get, _imesh.csParticleAux_color_set)
    particleSize = _swig_property(_imesh.csParticleAux_particleSize_get, _imesh.csParticleAux_particleSize_set)
    pad = _swig_property(_imesh.csParticleAux_pad_get, _imesh.csParticleAux_pad_set)
    def __init__(self): 
        this = _imesh.new_csParticleAux()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csParticleAux
    __del__ = lambda self : None;
csParticleAux_swigregister = _imesh.csParticleAux_swigregister
csParticleAux_swigregister(csParticleAux)

class csParticleBuffer(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    particleData = _swig_property(_imesh.csParticleBuffer_particleData_get, _imesh.csParticleBuffer_particleData_set)
    particleAuxData = _swig_property(_imesh.csParticleBuffer_particleAuxData_get, _imesh.csParticleBuffer_particleAuxData_set)
    particleCount = _swig_property(_imesh.csParticleBuffer_particleCount_get, _imesh.csParticleBuffer_particleCount_set)
    def __init__(self): 
        this = _imesh.new_csParticleBuffer()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _imesh.delete_csParticleBuffer
    __del__ = lambda self : None;
csParticleBuffer_swigregister = _imesh.csParticleBuffer_swigregister
csParticleBuffer_swigregister(csParticleBuffer)

class iParticleEmitter(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetEnabled(self, *args): return _imesh.iParticleEmitter_SetEnabled(self, *args)
    def GetEnabled(self): return _imesh.iParticleEmitter_GetEnabled(self)
    def SetStartTime(self, *args): return _imesh.iParticleEmitter_SetStartTime(self, *args)
    def GetStartTime(self): return _imesh.iParticleEmitter_GetStartTime(self)
    def SetDuration(self, *args): return _imesh.iParticleEmitter_SetDuration(self, *args)
    def GetDuration(self): return _imesh.iParticleEmitter_GetDuration(self)
    def SetEmissionRate(self, *args): return _imesh.iParticleEmitter_SetEmissionRate(self, *args)
    def GetEmissionRate(self): return _imesh.iParticleEmitter_GetEmissionRate(self)
    def SetInitialTTL(self, *args): return _imesh.iParticleEmitter_SetInitialTTL(self, *args)
    def GetInitialTTL(self): return _imesh.iParticleEmitter_GetInitialTTL(self)
    def SetInitialMass(self, *args): return _imesh.iParticleEmitter_SetInitialMass(self, *args)
    def GetInitialMass(self): return _imesh.iParticleEmitter_GetInitialMass(self)
    def Clone(self): return _imesh.iParticleEmitter_Clone(self)
    def ParticlesToEmit(self, *args): return _imesh.iParticleEmitter_ParticlesToEmit(self, *args)
    def EmitParticles(self, *args): return _imesh.iParticleEmitter_EmitParticles(self, *args)
    scfGetVersion = staticmethod(_imesh.iParticleEmitter_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleEmitter
    __del__ = lambda self : None;
iParticleEmitter_swigregister = _imesh.iParticleEmitter_swigregister
iParticleEmitter_swigregister(iParticleEmitter)

def iParticleEmitter_scfGetVersion():
  return _imesh.iParticleEmitter_scfGetVersion()
iParticleEmitter_scfGetVersion = _imesh.iParticleEmitter_scfGetVersion

class iParticleEffector(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def Clone(self): return _imesh.iParticleEffector_Clone(self)
    def EffectParticles(self, *args): return _imesh.iParticleEffector_EffectParticles(self, *args)
    scfGetVersion = staticmethod(_imesh.iParticleEffector_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleEffector
    __del__ = lambda self : None;
iParticleEffector_swigregister = _imesh.iParticleEffector_swigregister
iParticleEffector_swigregister(iParticleEffector)

def iParticleEffector_scfGetVersion():
  return _imesh.iParticleEffector_scfGetVersion()
iParticleEffector_scfGetVersion = _imesh.iParticleEffector_scfGetVersion

class iParticleSystemBase(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetParticleRenderOrientation(self, *args): return _imesh.iParticleSystemBase_SetParticleRenderOrientation(self, *args)
    def GetParticleRenderOrientation(self): return _imesh.iParticleSystemBase_GetParticleRenderOrientation(self)
    def SetRotationMode(self, *args): return _imesh.iParticleSystemBase_SetRotationMode(self, *args)
    def GetRotationMode(self): return _imesh.iParticleSystemBase_GetRotationMode(self)
    def SetSortMode(self, *args): return _imesh.iParticleSystemBase_SetSortMode(self, *args)
    def GetSortMode(self): return _imesh.iParticleSystemBase_GetSortMode(self)
    def SetIntegrationMode(self, *args): return _imesh.iParticleSystemBase_SetIntegrationMode(self, *args)
    def GetIntegrationMode(self): return _imesh.iParticleSystemBase_GetIntegrationMode(self)
    def SetCommonDirection(self, *args): return _imesh.iParticleSystemBase_SetCommonDirection(self, *args)
    def GetCommonDirection(self): return _imesh.iParticleSystemBase_GetCommonDirection(self)
    def SetTransformMode(self, *args): return _imesh.iParticleSystemBase_SetTransformMode(self, *args)
    def GetTransformMode(self): return _imesh.iParticleSystemBase_GetTransformMode(self)
    def SetUseIndividualSize(self, *args): return _imesh.iParticleSystemBase_SetUseIndividualSize(self, *args)
    def GetUseIndividualSize(self): return _imesh.iParticleSystemBase_GetUseIndividualSize(self)
    def SetParticleSize(self, *args): return _imesh.iParticleSystemBase_SetParticleSize(self, *args)
    def GetParticleSize(self): return _imesh.iParticleSystemBase_GetParticleSize(self)
    def SetMinBoundingBox(self, *args): return _imesh.iParticleSystemBase_SetMinBoundingBox(self, *args)
    def GetMinBoundingBox(self): return _imesh.iParticleSystemBase_GetMinBoundingBox(self)
    def AddEmitter(self, *args): return _imesh.iParticleSystemBase_AddEmitter(self, *args)
    def GetEmitter(self, *args): return _imesh.iParticleSystemBase_GetEmitter(self, *args)
    def RemoveEmitter(self, *args): return _imesh.iParticleSystemBase_RemoveEmitter(self, *args)
    def GetEmitterCount(self): return _imesh.iParticleSystemBase_GetEmitterCount(self)
    def AddEffector(self, *args): return _imesh.iParticleSystemBase_AddEffector(self, *args)
    def GetEffector(self, *args): return _imesh.iParticleSystemBase_GetEffector(self, *args)
    def RemoveEffector(self, *args): return _imesh.iParticleSystemBase_RemoveEffector(self, *args)
    def GetEffectorCount(self): return _imesh.iParticleSystemBase_GetEffectorCount(self)
    scfGetVersion = staticmethod(_imesh.iParticleSystemBase_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleSystemBase
    __del__ = lambda self : None;
iParticleSystemBase_swigregister = _imesh.iParticleSystemBase_swigregister
iParticleSystemBase_swigregister(iParticleSystemBase)

def iParticleSystemBase_scfGetVersion():
  return _imesh.iParticleSystemBase_scfGetVersion()
iParticleSystemBase_scfGetVersion = _imesh.iParticleSystemBase_scfGetVersion

class iParticleSystemFactory(iParticleSystemBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetDeepCreation(self, *args): return _imesh.iParticleSystemFactory_SetDeepCreation(self, *args)
    def GetDeepCreation(self): return _imesh.iParticleSystemFactory_GetDeepCreation(self)
    scfGetVersion = staticmethod(_imesh.iParticleSystemFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleSystemFactory
    __del__ = lambda self : None;
iParticleSystemFactory_swigregister = _imesh.iParticleSystemFactory_swigregister
iParticleSystemFactory_swigregister(iParticleSystemFactory)

def iParticleSystemFactory_scfGetVersion():
  return _imesh.iParticleSystemFactory_scfGetVersion()
iParticleSystemFactory_scfGetVersion = _imesh.iParticleSystemFactory_scfGetVersion

class iParticleSystem(iParticleSystemBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def GetParticleCount(self): return _imesh.iParticleSystem_GetParticleCount(self)
    def GetParticle(self, *args): return _imesh.iParticleSystem_GetParticle(self, *args)
    def GetParticleAux(self, *args): return _imesh.iParticleSystem_GetParticleAux(self, *args)
    def LockForExternalControl(self, *args): return _imesh.iParticleSystem_LockForExternalControl(self, *args)
    def Advance(self, *args): return _imesh.iParticleSystem_Advance(self, *args)
    scfGetVersion = staticmethod(_imesh.iParticleSystem_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleSystem
    __del__ = lambda self : None;
iParticleSystem_swigregister = _imesh.iParticleSystem_swigregister
iParticleSystem_swigregister(iParticleSystem)

def iParticleSystem_scfGetVersion():
  return _imesh.iParticleSystem_scfGetVersion()
iParticleSystem_scfGetVersion = _imesh.iParticleSystem_scfGetVersion

CS_PARTICLE_BUILTIN_CENTER = _imesh.CS_PARTICLE_BUILTIN_CENTER
CS_PARTICLE_BUILTIN_VOLUME = _imesh.CS_PARTICLE_BUILTIN_VOLUME
CS_PARTICLE_BUILTIN_SURFACE = _imesh.CS_PARTICLE_BUILTIN_SURFACE
class iParticleBuiltinEmitterBase(iParticleEmitter):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetPosition(self, *args): return _imesh.iParticleBuiltinEmitterBase_SetPosition(self, *args)
    def GetPosition(self): return _imesh.iParticleBuiltinEmitterBase_GetPosition(self)
    def SetParticlePlacement(self, *args): return _imesh.iParticleBuiltinEmitterBase_SetParticlePlacement(self, *args)
    def GetParticlePlacement(self): return _imesh.iParticleBuiltinEmitterBase_GetParticlePlacement(self)
    def SetUniformVelocity(self, *args): return _imesh.iParticleBuiltinEmitterBase_SetUniformVelocity(self, *args)
    def GetUniformVelocity(self): return _imesh.iParticleBuiltinEmitterBase_GetUniformVelocity(self)
    def SetInitialVelocity(self, *args): return _imesh.iParticleBuiltinEmitterBase_SetInitialVelocity(self, *args)
    def GetInitialVelocity(self, *args): return _imesh.iParticleBuiltinEmitterBase_GetInitialVelocity(self, *args)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterBase_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterBase
    __del__ = lambda self : None;
iParticleBuiltinEmitterBase_swigregister = _imesh.iParticleBuiltinEmitterBase_swigregister
iParticleBuiltinEmitterBase_swigregister(iParticleBuiltinEmitterBase)

def iParticleBuiltinEmitterBase_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterBase_scfGetVersion()
iParticleBuiltinEmitterBase_scfGetVersion = _imesh.iParticleBuiltinEmitterBase_scfGetVersion

class iParticleBuiltinEmitterSphere(iParticleBuiltinEmitterBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRadius(self, *args): return _imesh.iParticleBuiltinEmitterSphere_SetRadius(self, *args)
    def GetRadius(self): return _imesh.iParticleBuiltinEmitterSphere_GetRadius(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterSphere_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterSphere
    __del__ = lambda self : None;
iParticleBuiltinEmitterSphere_swigregister = _imesh.iParticleBuiltinEmitterSphere_swigregister
iParticleBuiltinEmitterSphere_swigregister(iParticleBuiltinEmitterSphere)

def iParticleBuiltinEmitterSphere_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterSphere_scfGetVersion()
iParticleBuiltinEmitterSphere_scfGetVersion = _imesh.iParticleBuiltinEmitterSphere_scfGetVersion

class iParticleBuiltinEmitterCone(iParticleBuiltinEmitterBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetExtent(self, *args): return _imesh.iParticleBuiltinEmitterCone_SetExtent(self, *args)
    def GetExtent(self): return _imesh.iParticleBuiltinEmitterCone_GetExtent(self)
    def SetConeAngle(self, *args): return _imesh.iParticleBuiltinEmitterCone_SetConeAngle(self, *args)
    def GetConeAngle(self): return _imesh.iParticleBuiltinEmitterCone_GetConeAngle(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterCone_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterCone
    __del__ = lambda self : None;
iParticleBuiltinEmitterCone_swigregister = _imesh.iParticleBuiltinEmitterCone_swigregister
iParticleBuiltinEmitterCone_swigregister(iParticleBuiltinEmitterCone)

def iParticleBuiltinEmitterCone_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterCone_scfGetVersion()
iParticleBuiltinEmitterCone_scfGetVersion = _imesh.iParticleBuiltinEmitterCone_scfGetVersion

class iParticleBuiltinEmitterBox(iParticleBuiltinEmitterBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetBox(self, *args): return _imesh.iParticleBuiltinEmitterBox_SetBox(self, *args)
    def GetBox(self): return _imesh.iParticleBuiltinEmitterBox_GetBox(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterBox_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterBox
    __del__ = lambda self : None;
iParticleBuiltinEmitterBox_swigregister = _imesh.iParticleBuiltinEmitterBox_swigregister
iParticleBuiltinEmitterBox_swigregister(iParticleBuiltinEmitterBox)

def iParticleBuiltinEmitterBox_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterBox_scfGetVersion()
iParticleBuiltinEmitterBox_scfGetVersion = _imesh.iParticleBuiltinEmitterBox_scfGetVersion

class iParticleBuiltinEmitterCylinder(iParticleBuiltinEmitterBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetRadius(self, *args): return _imesh.iParticleBuiltinEmitterCylinder_SetRadius(self, *args)
    def GetRadius(self): return _imesh.iParticleBuiltinEmitterCylinder_GetRadius(self)
    def SetExtent(self, *args): return _imesh.iParticleBuiltinEmitterCylinder_SetExtent(self, *args)
    def GetExtent(self): return _imesh.iParticleBuiltinEmitterCylinder_GetExtent(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterCylinder_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterCylinder
    __del__ = lambda self : None;
iParticleBuiltinEmitterCylinder_swigregister = _imesh.iParticleBuiltinEmitterCylinder_swigregister
iParticleBuiltinEmitterCylinder_swigregister(iParticleBuiltinEmitterCylinder)

def iParticleBuiltinEmitterCylinder_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterCylinder_scfGetVersion()
iParticleBuiltinEmitterCylinder_scfGetVersion = _imesh.iParticleBuiltinEmitterCylinder_scfGetVersion

class iParticleBuiltinEmitterFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateSphere(self): return _imesh.iParticleBuiltinEmitterFactory_CreateSphere(self)
    def CreateCone(self): return _imesh.iParticleBuiltinEmitterFactory_CreateCone(self)
    def CreateBox(self): return _imesh.iParticleBuiltinEmitterFactory_CreateBox(self)
    def CreateCylinder(self): return _imesh.iParticleBuiltinEmitterFactory_CreateCylinder(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEmitterFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEmitterFactory
    __del__ = lambda self : None;
iParticleBuiltinEmitterFactory_swigregister = _imesh.iParticleBuiltinEmitterFactory_swigregister
iParticleBuiltinEmitterFactory_swigregister(iParticleBuiltinEmitterFactory)

def iParticleBuiltinEmitterFactory_scfGetVersion():
  return _imesh.iParticleBuiltinEmitterFactory_scfGetVersion()
iParticleBuiltinEmitterFactory_scfGetVersion = _imesh.iParticleBuiltinEmitterFactory_scfGetVersion

class iParticleBuiltinEffectorForce(iParticleEffector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetAcceleration(self, *args): return _imesh.iParticleBuiltinEffectorForce_SetAcceleration(self, *args)
    def GetAcceleration(self): return _imesh.iParticleBuiltinEffectorForce_GetAcceleration(self)
    def SetForce(self, *args): return _imesh.iParticleBuiltinEffectorForce_SetForce(self, *args)
    def GetForce(self): return _imesh.iParticleBuiltinEffectorForce_GetForce(self)
    def SetRandomAcceleration(self, *args): return _imesh.iParticleBuiltinEffectorForce_SetRandomAcceleration(self, *args)
    def GetRandomAcceleration(self): return _imesh.iParticleBuiltinEffectorForce_GetRandomAcceleration(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEffectorForce_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEffectorForce
    __del__ = lambda self : None;
iParticleBuiltinEffectorForce_swigregister = _imesh.iParticleBuiltinEffectorForce_swigregister
iParticleBuiltinEffectorForce_swigregister(iParticleBuiltinEffectorForce)

def iParticleBuiltinEffectorForce_scfGetVersion():
  return _imesh.iParticleBuiltinEffectorForce_scfGetVersion()
iParticleBuiltinEffectorForce_scfGetVersion = _imesh.iParticleBuiltinEffectorForce_scfGetVersion

class iParticleBuiltinEffectorLinColor(iParticleEffector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def AddColor(self, *args): return _imesh.iParticleBuiltinEffectorLinColor_AddColor(self, *args)
    def SetColor(self, *args): return _imesh.iParticleBuiltinEffectorLinColor_SetColor(self, *args)
    def GetColor(self, *args): return _imesh.iParticleBuiltinEffectorLinColor_GetColor(self, *args)
    def GetColorCount(self): return _imesh.iParticleBuiltinEffectorLinColor_GetColorCount(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEffectorLinColor_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEffectorLinColor
    __del__ = lambda self : None;
iParticleBuiltinEffectorLinColor_swigregister = _imesh.iParticleBuiltinEffectorLinColor_swigregister
iParticleBuiltinEffectorLinColor_swigregister(iParticleBuiltinEffectorLinColor)

def iParticleBuiltinEffectorLinColor_scfGetVersion():
  return _imesh.iParticleBuiltinEffectorLinColor_scfGetVersion()
iParticleBuiltinEffectorLinColor_scfGetVersion = _imesh.iParticleBuiltinEffectorLinColor_scfGetVersion

CS_PARTICLE_BUILTIN_SPIRAL = _imesh.CS_PARTICLE_BUILTIN_SPIRAL
CS_PARTICLE_BUILTIN_RADIALPOINT = _imesh.CS_PARTICLE_BUILTIN_RADIALPOINT
class iParticleBuiltinEffectorVelocityField(iParticleEffector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetType(self, *args): return _imesh.iParticleBuiltinEffectorVelocityField_SetType(self, *args)
    def GetType(self): return _imesh.iParticleBuiltinEffectorVelocityField_GetType(self)
    def SetFParameter(self, *args): return _imesh.iParticleBuiltinEffectorVelocityField_SetFParameter(self, *args)
    def GetFParameter(self, *args): return _imesh.iParticleBuiltinEffectorVelocityField_GetFParameter(self, *args)
    def GetFParameterCount(self): return _imesh.iParticleBuiltinEffectorVelocityField_GetFParameterCount(self)
    def SetVParameter(self, *args): return _imesh.iParticleBuiltinEffectorVelocityField_SetVParameter(self, *args)
    def GetVParameter(self, *args): return _imesh.iParticleBuiltinEffectorVelocityField_GetVParameter(self, *args)
    def GetVParameterCount(self): return _imesh.iParticleBuiltinEffectorVelocityField_GetVParameterCount(self)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEffectorVelocityField
    __del__ = lambda self : None;
iParticleBuiltinEffectorVelocityField_swigregister = _imesh.iParticleBuiltinEffectorVelocityField_swigregister
iParticleBuiltinEffectorVelocityField_swigregister(iParticleBuiltinEffectorVelocityField)

CS_PARTICLE_MASK_MASS = _imesh.CS_PARTICLE_MASK_MASS
CS_PARTICLE_MASK_LINEARVELOCITY = _imesh.CS_PARTICLE_MASK_LINEARVELOCITY
CS_PARTICLE_MASK_ANGULARVELOCITY = _imesh.CS_PARTICLE_MASK_ANGULARVELOCITY
CS_PARTICLE_MASK_COLOR = _imesh.CS_PARTICLE_MASK_COLOR
CS_PARTICLE_MASK_PARTICLESIZE = _imesh.CS_PARTICLE_MASK_PARTICLESIZE
CS_PARTICLE_MASK_ALL = _imesh.CS_PARTICLE_MASK_ALL
class csParticleParameterSet(object):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    mass = _swig_property(_imesh.csParticleParameterSet_mass_get, _imesh.csParticleParameterSet_mass_set)
    linearVelocity = _swig_property(_imesh.csParticleParameterSet_linearVelocity_get, _imesh.csParticleParameterSet_linearVelocity_set)
    angularVelocity = _swig_property(_imesh.csParticleParameterSet_angularVelocity_get, _imesh.csParticleParameterSet_angularVelocity_set)
    color = _swig_property(_imesh.csParticleParameterSet_color_get, _imesh.csParticleParameterSet_color_set)
    particleSize = _swig_property(_imesh.csParticleParameterSet_particleSize_get, _imesh.csParticleParameterSet_particleSize_set)
    def __init__(self): 
        this = _imesh.new_csParticleParameterSet()
        try: self.this.append(this)
        except: self.this = this
    def Clear(self): return _imesh.csParticleParameterSet_Clear(self)
    __swig_destroy__ = _imesh.delete_csParticleParameterSet
    __del__ = lambda self : None;
csParticleParameterSet_swigregister = _imesh.csParticleParameterSet_swigregister
csParticleParameterSet_swigregister(csParticleParameterSet)

class iParticleBuiltinEffectorLinear(iParticleEffector):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def SetMask(self, *args): return _imesh.iParticleBuiltinEffectorLinear_SetMask(self, *args)
    def GetMask(self): return _imesh.iParticleBuiltinEffectorLinear_GetMask(self)
    def AddParameterSet(self, *args): return _imesh.iParticleBuiltinEffectorLinear_AddParameterSet(self, *args)
    def SetParameterSet(self, *args): return _imesh.iParticleBuiltinEffectorLinear_SetParameterSet(self, *args)
    def GetParameterSet(self, *args): return _imesh.iParticleBuiltinEffectorLinear_GetParameterSet(self, *args)
    def GetParameterSetCount(self): return _imesh.iParticleBuiltinEffectorLinear_GetParameterSetCount(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEffectorLinear_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEffectorLinear
    __del__ = lambda self : None;
iParticleBuiltinEffectorLinear_swigregister = _imesh.iParticleBuiltinEffectorLinear_swigregister
iParticleBuiltinEffectorLinear_swigregister(iParticleBuiltinEffectorLinear)

def iParticleBuiltinEffectorLinear_scfGetVersion():
  return _imesh.iParticleBuiltinEffectorLinear_scfGetVersion()
iParticleBuiltinEffectorLinear_scfGetVersion = _imesh.iParticleBuiltinEffectorLinear_scfGetVersion

class iParticleBuiltinEffectorFactory(core.iBase):
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    def CreateForce(self): return _imesh.iParticleBuiltinEffectorFactory_CreateForce(self)
    def CreateLinColor(self): return _imesh.iParticleBuiltinEffectorFactory_CreateLinColor(self)
    def CreateVelocityField(self): return _imesh.iParticleBuiltinEffectorFactory_CreateVelocityField(self)
    def CreateLinear(self): return _imesh.iParticleBuiltinEffectorFactory_CreateLinear(self)
    scfGetVersion = staticmethod(_imesh.iParticleBuiltinEffectorFactory_scfGetVersion)
    __swig_destroy__ = _imesh.delete_iParticleBuiltinEffectorFactory
    __del__ = lambda self : None;
iParticleBuiltinEffectorFactory_swigregister = _imesh.iParticleBuiltinEffectorFactory_swigregister
iParticleBuiltinEffectorFactory_swigregister(iParticleBuiltinEffectorFactory)

def iParticleBuiltinEffectorFactory_scfGetVersion():
  return _imesh.iParticleBuiltinEffectorFactory_scfGetVersion()
iParticleBuiltinEffectorFactory_scfGetVersion = _imesh.iParticleBuiltinEffectorFactory_scfGetVersion

CS_POLYRANGE_LAST = csPolygonRange (-1, -1)



