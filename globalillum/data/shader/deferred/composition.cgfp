<cgfp>

<variablemap variable="inv viewport size" destination="InvViewportSize" />
<variablemap variable="debug show ambocc" destination="ShowAO" />
<variablemap variable="debug show globalillum" destination="ShowGlobalIllum" />

<program>

<![CDATA[

const float EPSILON = 0.001f;

struct vertex2fragment 
{
  float2 TexCoord : TEXCOORD0;
  float4 ScreenPos : TEXCOORD1;  
};

float4 main(vertex2fragment IN,            
            uniform sampler2D DiffuseBuffer,
            uniform sampler2D NormalBuffer,
            uniform sampler2D AmbientBuffer,            
            uniform sampler2D DirectRadianceBuffer,
            uniform sampler2D GlobalIllumBuffer,        
            uniform float2 InvViewportSize, // (1/viewport.width, 1/viewport.height)
            uniform int ShowAO,
            uniform int ShowGlobalIllum) : COLOR
{
	float4 bilinearWeights[4] =
  {
    float4( 9/16, 3/16, 3/16, 1/16 ), 
    float4( 3/16, 9/16, 1/16, 3/16 ), 
    float4( 3/16, 1/16, 9/16, 3/16 ), 
    float4( 1/16, 3/16, 3/16, 9/16 ) 
  };
  
  float2 screenXY = IN.ScreenPos.xy / IN.ScreenPos.w;
  float2 texCoord = screenXY * 0.5f + 0.5f; //IN.TexCoord;   
  
  float4 normalDepthVS = tex2D (NormalBuffer, texCoord);  
  float3 pixelNormalVS = normalDepthVS.rgb * 2.0f - 1.0f;
	float pixelDepth = normalDepthVS.a;
  
  float AO = 0.0f;
  float weightedAO = 0.0f;
  float3 radiance = float3(0.0f);
  float3 weightedRadiance = float3(0.0f);
  float weightSum = 0.0f;
  int nSample = 0;
  
  for (int i = -1; i <= 1; i += 2)
  {
    for (int j = -1; j <= 1; j += 2)
    {
      float2 sampleTexCoord = texCoord + float2 (j * InvViewportSize.x, i * InvViewportSize.y);
      float4 sampleDepthNormalVS = tex2D (NormalBuffer, sampleTexCoord);
      float3 sampleNormalVS = sampleDepthNormalVS.rgb * 2.0f - 1.0f;
      float sampleDepth = sampleDepthNormalVS.a;
          
      float deltaZ = abs (sampleDepth - pixelDepth);
      float dotN = dot (pixelNormalVS, sampleNormalVS);       
      float4 sampleGI = tex2D (GlobalIllumBuffer, sampleTexCoord);     
           
      float weight = /*bilinearWeights[nSample]*/ 0.25f * pow (dotN, 32.0f) / 
          (EPSILON + deltaZ);      
      
      weightedAO += sampleGI.a * weight;
      weightedRadiance += sampleGI.rgb * weight;
      weightSum += weight;      
      
      AO += sampleGI.a;
      radiance += sampleGI.rgb;
      nSample++;
    }
	}
  
  if (weightSum > 0.0f)
  {
    weightSum = 1.0f / weightSum;
    AO = weightedAO * weightSum;
    radiance = weightedRadiance * weightSum;
  }
  else
  {    
    AO *= 0.25f;
    radiance *= 0.25f;
  }
  
  float3 directRadiance = tex2D (DirectRadianceBuffer, texCoord).rgb;  
  float3 diffuseColor = tex2D (DiffuseBuffer, texCoord).rgb;  
  float3 ambientColor = tex2D (AmbientBuffer, texCoord).rgb;  
  
  radiance = diffuseColor * AO * (ambientColor + radiance);
  
  if (ShowAO != 0)
    return float4 (AO);
  else if (ShowGlobalIllum != 0)
    return float4 (radiance, 1.0f);
  else
    return float4 (directRadiance + radiance, 1.0f);
}

]]>
</program>
</cgfp>