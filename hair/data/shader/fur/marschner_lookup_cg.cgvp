<cgvp>
  <variablemap variable="light 0 position" destination="LightPos" />
<program>
<![CDATA[

struct app2vertex {
	float4 Position : POSITION;
	float3 Normal : NORMAL;
	float3 Tangent : TEXCOORD0;
	float3 Binormal : TEXCOORD1;	
};

struct vertex2fragment { 
	float4 HPosition : POSITION;
	float3 LightVec : TEXCOORD0;	
	float3 WorldNormal : TEXCOORD1;		
	float3 WorldView: TEXCOORD2;
	float3 AmbientColor: TEXCOORD3;
};

// main function
vertex2fragment main (app2vertex IN,
	uniform float4x4 ModelViewIT : state.matrix.modelview.invtrans,
	uniform float4x4 ModelViewProj : state.matrix.mvp,
	uniform float4 LightPos)
{
	LightPos = float4(9000, 0, 0, 0);
	float3 PointLightColor = 0.1;

	vertex2fragment OUT;

	OUT.WorldNormal = IN.Tangent;
	
	// position in object coords:	
	float4 Po = float4(IN.Position.x, IN.Position.y, IN.Position.z, 1.0);
	// pos in world coords - same the mesh is recomputed every time
	float3 Pw = Po.xyz;
	
	// light vector
	OUT.LightVec = Pw - LightPos.xyz;

	// view vector in world coords:
	OUT.WorldView = normalize(ModelViewIT[3].xyz - Pw);
	// pos in clip coords:
	OUT.HPosition = mul(ModelViewProj, Po);
	
	// compute point light lighting  
	float3 Delta = OUT.LightVec;
	float pointLightDist = sqrt( dot( Delta, Delta ) ) * (1.0 / 400.0);
	float att = min(1, max( 0, pointLightDist ) );
	OUT.AmbientColor = (1.0 - att) * PointLightColor;
	  
	return OUT;	// output of vertex shader
}

]]>
</program>
</cgvp>