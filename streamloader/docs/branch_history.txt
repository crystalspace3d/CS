Crystal Space Streaming Loader branch change log.
http://www.crystalspace3d.org/tikiwiki/tiki-index.php?page=Streaming+Loader

The overall history is in reverse (descending) chronological order, so that
each new day's entries apears before the previous day's entries.  The
individual changes for each given day, however, are in normal (ascending)
chronological order.

16-June-2006
	- David H. Bronke changed the basic iStreamSource implementation to not
	  open the file until we actually start processing the request, to keep
	  from having too many files open at the same time.
15-June-2006
	- David H. Bronke rewrote the basic iStreamSource implementation to read
	  in blocks on a per-frame basis, until a time threshold is exceeded. This
	  allows I/O with the streaming loader to be non-blocking. Also
	  implemented basic priority handling and changed the definition of the
	  priority constants so that a higher priority has a lower value than
	  lower priorities. Effectively, the numerical value of a priority now
	  stands for the amount of time to allow for the given request to be
	  filled.
	- David H. Bronke removed SetBasePath() from the foreground iStreamSource
	  implementation.
	- David H. Bronke fixed the module name used for the reporter macro in
	  streamloader_fg.cpp.
14-June-2006
	- David H. Bronke finished a basic implementation of iStreamSource. This
	  implementation is non-threaded, blocking, and uses synchronous I/O.
	  Therefore, it needs some more work before it's of any use. It should,
	  however, correctly call the callbacks for success and error.
8-June-2006
	- David H. Bronke audited imap/streamsource.h and made the following
	  changes:
	  - The stream callback now contains a StreamingError() function as well
	    as StreamingFinished() (renamed from DataReady) to allow errors to be
	    caught after streaming has started. An iStreamCallback* parameter has
	    been added to SaveBuffer() as well, allowing both loading and saving
	    to report back on errors and completion of the streaming operation.
	  - Priorities have also been added to QueryBuffer() and SaveBuffer().
	    There are currently four priority levels: low, normal, high, and
	    time-critical. The plan is for buffers to start at the given priority,
	    and then have their priority increase every so often so that buffers
	    that were requested earlier have priority over newly-requested buffers
	    of the same starting priority.
	  - An iProgressMeter* parameter has been added to QueryBuffer() and
	    SaveBuffer() to allow for progress indication later on.
3-June-2006
	- David H. Bronke added a forward declaration of iDataBuffer to
	  imap/streamsource.h, and added a stubbed-out implementation of
	  iStreamSource. Also, branch_history.txt was created.
