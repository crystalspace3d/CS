// This file is automatically generated.
#include "cssysdef.h"
#include "csutil/scf.h"

// Put static linking stuff into own section.
// The idea is that this allows the section to be swapped out but not
// swapped in again b/c something else in it was needed.
#if !defined(CS_DEBUG) && defined(CS_COMPILER_MSVC)
#pragma const_seg(".CSmetai")
#pragma comment(linker, "/section:.CSmetai,r")
#pragma code_seg(".CSmeta")
#pragma comment(linker, "/section:.CSmeta,er")
#pragma comment(linker, "/merge:.CSmetai=.CSmeta")
#endif

namespace csStaticPluginInit
{
static char const metainfo_terrain[] =
"<?xml version=\"1.0\"?>"
"<!-- terrain.csplugin -->"
"<plugin>"
"  <scf>"
"    <classes>"
"      <class>"
"        <name>crystalspace.terrain.simplerenderer</name>"
"        <implementation>csTerrainSimpleRenderer</implementation>"
"        <description>Simple terrain renderer</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.terrain.simplecollider</name>"
"        <implementation>csTerrainSimpleCollider</implementation>"
"        <description>Simple terrain collider</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.terrain.terrainsystem</name>"
"        <implementation>csTerrainSystem</implementation>"
"        <description>Terrain system</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.terrain.simpledatafeeder</name>"
"        <implementation>csTerrainSimpleDataFeeder</implementation>"
"        <description>Terrain simple data feeder</description>"
"      </class>"
"      <class>"
"        <name>crystalspace.terrain.builder</name>"
"        <implementation>csTerrainBuilder</implementation>"
"        <description>Terrain builder</description>"
"      </class>"
"    </classes>"
"  </scf>"
"</plugin>"
;
  #ifndef csTerrainSimpleRenderer_FACTORY_REGISTER_DEFINED 
  #define csTerrainSimpleRenderer_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTerrainSimpleRenderer) 
  #endif
  #ifndef csTerrainSimpleCollider_FACTORY_REGISTER_DEFINED 
  #define csTerrainSimpleCollider_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTerrainSimpleCollider) 
  #endif
  #ifndef csTerrainSystem_FACTORY_REGISTER_DEFINED 
  #define csTerrainSystem_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTerrainSystem) 
  #endif
  #ifndef csTerrainSimpleDataFeeder_FACTORY_REGISTER_DEFINED 
  #define csTerrainSimpleDataFeeder_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTerrainSimpleDataFeeder) 
  #endif
  #ifndef csTerrainBuilder_FACTORY_REGISTER_DEFINED 
  #define csTerrainBuilder_FACTORY_REGISTER_DEFINED 
    SCF_DEFINE_FACTORY_FUNC_REGISTRATION(csTerrainBuilder) 
  #endif

class terrain
{
SCF_REGISTER_STATIC_LIBRARY(terrain,metainfo_terrain)
  #ifndef csTerrainSimpleRenderer_FACTORY_REGISTERED 
  #define csTerrainSimpleRenderer_FACTORY_REGISTERED 
    csTerrainSimpleRenderer_StaticInit csTerrainSimpleRenderer_static_init__; 
  #endif
  #ifndef csTerrainSimpleCollider_FACTORY_REGISTERED 
  #define csTerrainSimpleCollider_FACTORY_REGISTERED 
    csTerrainSimpleCollider_StaticInit csTerrainSimpleCollider_static_init__; 
  #endif
  #ifndef csTerrainSystem_FACTORY_REGISTERED 
  #define csTerrainSystem_FACTORY_REGISTERED 
    csTerrainSystem_StaticInit csTerrainSystem_static_init__; 
  #endif
  #ifndef csTerrainSimpleDataFeeder_FACTORY_REGISTERED 
  #define csTerrainSimpleDataFeeder_FACTORY_REGISTERED 
    csTerrainSimpleDataFeeder_StaticInit csTerrainSimpleDataFeeder_static_init__; 
  #endif
  #ifndef csTerrainBuilder_FACTORY_REGISTERED 
  #define csTerrainBuilder_FACTORY_REGISTERED 
    csTerrainBuilder_StaticInit csTerrainBuilder_static_init__; 
  #endif
public:
 terrain();
};
terrain::terrain() {}

}
