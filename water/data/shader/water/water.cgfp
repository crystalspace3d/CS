//---------------------------------------------------------------------------------
//Input
//---------------------------------------------------------------------------------

struct vert2frag
{
	float4 Position    	: POSITION;
	float4 Color	   	: COLOR;
	float4 PosRefl      : TEXCOORD0;
	float4 PosRefr      : TEXCOORD1;
	float2 NormalTC		: TEXCOORD2; 
};

// Calculated from 1.3333, which is approx. refraction index for water
// R0 is: 
// float const R0 =  pow(1.0-refractionIndexRatio, 2.0)  
//                 / pow(1.0+refractionIndexRatio, 2.0); 
const float R0 = 0.02040781341208;

// Copied this from a NVidia doc
// http://developer.nvidia.com/object/fresnel_wp.html
float fresnel(float3 view, float3 normal) 
{ 
    // light and normal are assumed to be normalized  
    return saturate(R0 + (1.0-R0) * pow(1.0-dot(view, normal), 5.0));
}

// Water color
const float3 watCol = float3(0.05, 0.15, 0.4);

//---------------------------------------------------------------------------------
//Shader entry
//---------------------------------------------------------------------------------

float4 main (vert2frag IN,
			 uniform float4 lightPos,
			 uniform float4 lightCol,
			 uniform float shininess,
			 uniform float waterAlpha,
			 uniform sampler2D TexNormal,
			 uniform sampler2D TexReflect,
			 uniform sampler2D TexRefract,
			 uniform float4x4 ModelViewIT : state.matrix.modelview.invtrans) : COLOR        
{     
    
	float4 color : COLOR ;
	float4 camera_pos = ModelViewIT[3];
	
	float3 light_vector = lightPos.xyz - IN.Position.xyz;
	//float3 light_vector = normalize(lightPos.xyz - IN.Position.xyz);   // Not working
	
	float3 eye_vector = camera_pos.xyz - IN.Position.xyz;
	//float3 eye_vector = normalize(camera_pos.xyz - IN.Position.xyz);   // Not working
	
	float3 N =  tex2D(TexNormal, IN.NormalTC).xyz ;
	//float3 N = normalize( tex2D(TexNormal, IN.NormalTC).xyz );      // Not working
	
	float4 reflColor = tex2Dproj(TexReflect,IN.PosRefl);
	float4 refrColor = tex2Dproj(TexRefract,IN.PosRefr);
	
	//float3 light_reflection = reflect(light_vector,N);     // Not working
	//float3 light_reflection = normalize(reflect(-light_vector, N));      // Not working
	
	//float3 sunlight = max(pow(dot(light_reflection,eye_vector),shininess),0);
	//float3 light = sunlight;
	
	/*	
	// Fresnel effect
    const float R = 0.20373;
    const float distVar = 150;
 
    float facing = 1.0 - max( dot(eye_vector, N ) ,0);
    float fresnelWeight = max (R + (1.0 - R) * pow( facing ,3.0) , N);
    fresnelWeight = min (( fresnelWeight + max(IN.Position.z / distVar , fresnelWeight ))*0.5 , 1);
 
    reflColor *= (1- fresnelWeight );
    refrColor *= fresnelWeight ;
	*/
	
    //color.rbg = light + reflColor.xyz + refrColor.xyz;
	color = tex2Dproj(TexReflect,IN.PosRefl);
	color.a = 1.0;
	return color;
}

//---------------------------------------------------------------------------------
//end
//---------------------------------------------------------------------------------
